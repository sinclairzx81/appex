/*--------------------------------------------------------------------------

ï»¿The MIT License (MIT)

Copyright (c) 2013 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

--------------------------------------------------------------------------*/

var appex;
(function (appex) {
    (function (web) {
        var Server = (function () {
            function Server(options) {
                this.options = options;
                this.compiler = new appex.compiler.Compiler();

                this.mime = new appex.web.media.Mime();

                this.module = null;

                this.schema = null;

                this.router = null;

                this.sitemap = null;

                this.template = new appex.templates.Engine({ devmode: false });

                this.waiters = [];

                this.compiling = false;

                this.compiled = false;

                this.options.stdout.write('appex \033[32m- server\033[0m\n');
            }
            Server.prototype.listen = function (port) {
                var protocol = this.options.protocol == "http" ? node.http : node.https;

                var that = this;

                this.server = protocol.createServer(function (request, response, next) {
                    that.handler(request, response, null);
                });

                this.server.listen(port);
            };

            Server.prototype.handler = function (request, response, next) {
                this.waiters.push(new appex.web.Waiter(request, response, next));

                var that = this;

                this.compile(function (diagnostics) {
                    if (diagnostics) {
                        that.errors(diagnostics);

                        return;
                    }

                    while (that.waiters.length > 0) {
                        var waiter = that.waiters.pop();

                        var context = that.load_context(waiter.request, waiter.response, waiter.next);

                        var handled = that.router.handler(context);

                        if (handled) {
                            if (that.options.logging) {
                                var message = [];

                                message.push('\033[32m[', waiter.stopwatch.elapsed(), 'ms]\033[0m ');

                                message.push(context.request.method, ' ');

                                message.push(context.request.url, '\n');

                                that.options.stdout.write(message.join(''));
                            }
                        } else {
                            if (context.next) {
                                context.next();
                            }
                        }
                    }
                });
            };

            Server.prototype.load_context = function (request, response, next) {
                var context = new appex.web.Context();

                if (this.options.context) {
                    for (var n in this.options.context) {
                        context[n] = this.options.context[n];
                    }
                }

                context.request = appex.web.BindRequest(request);

                context.response = appex.web.BindResponse(response, context.request.cookies);

                context.next = function () {
                };

                context.module = this.module;

                context.schema = this.schema;

                context.router = this.router;

                context.sitemap = this.sitemap;

                context.template = this.template;

                context.mime = this.mime;

                if (next) {
                    context.next = next;
                }

                context.attribute = {};

                return context;
            };

            Server.prototype.compile = function (callback) {
                if (!this.compiled) {
                    if (!this.compiling) {
                        this.compiling = true;

                        var that = this;

                        this.compiler.compile(this.options.program, function (result) {
                            that.compiling = false;

                            if (result.diagnostics.length > 0) {
                                callback(result.diagnostics);

                                return;
                            }

                            that.module = new appex.modules.Module(result);

                            that.router = new appex.web.routing.ModuleRouter(that.module);

                            that.schema = new appex.schema.JsonSchema(that.module);

                            that.sitemap = new appex.web.sitemap.Sitemap(that.router);

                            that.compiled = true;

                            that.compiler.dispose();

                            callback(null);
                        });
                    }
                } else {
                    callback(null);
                }
            };

            Server.prototype.errors = function (diagnostics) {
                while (this.waiters.length > 0) {
                    var request = this.waiters.pop();

                    request.response.writeHead(500, { 'content-type': 'text/plain' });

                    request.response.write('internal server error.');

                    request.response.end();

                    for (var n in diagnostics) {
                        var diagnostic = diagnostics[n];

                        var message = [];

                        message.push(diagnostic.path);

                        message.push(" [", (diagnostic.line_index + 1).toString(), ":", (diagnostic.char_index + 1).toString(), "] ");

                        message.push(diagnostic.message, '\n');

                        if (this.options.logging) {
                            this.options.stderr.write(message.join(''));
                        }
                    }
                }
            };

            Server.prototype.dispose = function () {
                this.compiler.dispose();

                if (this.module) {
                    this.module.dispose();
                }
            };
            return Server;
        })();
        web.Server = Server;
    })(appex.web || (appex.web = {}));
    var web = appex.web;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (util) {
        var StopWatch = (function () {
            function StopWatch() {
            }
            StopWatch.prototype.reset = function () {
                this.starttime = new Date();
            };

            StopWatch.prototype.elapsed = function () {
                if (this.starttime) {
                    var stoptime = new Date();

                    var offset = stoptime.getTime() - this.starttime.getTime();

                    return offset;
                }

                return 0;
            };
            return StopWatch;
        })();
        util.StopWatch = StopWatch;
    })(appex.util || (appex.util = {}));
    var util = appex.util;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (web) {
        var Waiter = (function () {
            function Waiter(request, response, next) {
                this.request = request;
                this.response = response;
                this.next = next;
                this.stopwatch = new appex.util.StopWatch();

                this.stopwatch.reset();
            }
            return Waiter;
        })();
        web.Waiter = Waiter;
    })(appex.web || (appex.web = {}));
    var web = appex.web;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (web) {
        var Context = (function () {
            function Context() {
            }
            return Context;
        })();
        web.Context = Context;
    })(appex.web || (appex.web = {}));
    var web = appex.web;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (web) {
        (function (routing) {
            var WildcardRoute = (function () {
                function WildcardRoute(moduleExport) {
                    this.moduleExport = moduleExport;
                    this.type = 'wildcard';

                    this.accessor = this.moduleExport.accessor();

                    this.attribute = this.moduleExport.attribute();

                    this.initialize();
                }
                WildcardRoute.prototype.match_verbs = function (context) {
                    if (!this.attribute.verbs) {
                        return true;
                    }

                    if (this.attribute.verbs) {
                        if (appex.util.TypeCheck.isArray(this.attribute.verbs)) {
                            for (var i = 0; i < this.attribute.verbs.length; i++) {
                                if (appex.util.TypeCheck.isString(this.attribute.verbs[i])) {
                                    if (this.attribute.verbs[i].toLowerCase() == context.request.method.toLowerCase()) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }

                    return false;
                };

                WildcardRoute.prototype.match_urls = function (context) {
                    var url = node.url.parse(context.request.url);

                    if (!this.attribute.urls) {
                        for (var n in this.regexps) {
                            if (this.regexps[n].test(url.pathname)) {
                                return true;
                            }
                        }
                    }

                    if (this.attribute.urls) {
                        if (appex.util.TypeCheck.isArray(this.attribute.urls)) {
                            for (var i = 0; i < this.attribute.urls.length; i++) {
                                if (appex.util.TypeCheck.isString(this.attribute.urls[i])) {
                                    if (this.attribute.urls[i] == url.pathname) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }

                    return false;
                };

                WildcardRoute.prototype.invoke = function (context) {
                    var _this = this;
                    var url = node.url.parse(context.request.url);

                    var parameters = this.arguments(url.pathname);

                    parameters.unshift(context);

                    var func_stack = [];

                    var next = function () {
                        if (func_stack.length > 0) {
                            var func = func_stack.pop();

                            context.next = next;

                            func(context);
                        } else {
                            _this.accessor.apply(_this, parameters);
                        }
                    };

                    if (this.attribute.use) {
                        if (appex.util.TypeCheck.isArray(this.attribute.use)) {
                            for (var i = (this.attribute.use.length - 1); i >= 0; i--) {
                                if (appex.util.TypeCheck.isFunction(this.attribute.use[i])) {
                                    func_stack.push(this.attribute.use[i]);
                                }
                            }

                            next();

                            return;
                        }
                    }

                    this.accessor.apply(this, parameters);
                };

                WildcardRoute.prototype.match = function (context) {
                    if (this.match_verbs(context)) {
                        return this.match_urls(context);
                    }

                    return false;
                };

                WildcardRoute.prototype.handler = function (context) {
                    context.attribute = this.attribute;

                    this.invoke(context);

                    return true;
                };

                WildcardRoute.prototype.urls = function () {
                    var result = [];

                    for (var n in this.regexps) {
                        result.push(this.regexps[n].toString());
                    }

                    return result;
                };

                WildcardRoute.prototype.initialize = function () {
                    this.regexps = [];

                    var method = this.moduleExport.type;

                    var scope = method.scope;

                    if (scope.length > 0) {
                        if (scope[0].indexOf('"') !== -1) {
                            scope = scope.slice(1);
                        }
                    }

                    if (method.parameters.length == 2) {
                        var parameter = method.parameters[1];

                        var buffer = [];

                        buffer.push("^");

                        if (scope.length > 0) {
                            buffer.push('/', scope.join('/'));
                        }
                        if (parameter.type.name == 'number') {
                            buffer.push('/([0-9]*)');
                        } else if (parameter.type.name == 'boolean') {
                            buffer.push('/(true|false)');
                        } else {
                            buffer.push('/(.*)');
                        }
                        buffer.push("$");

                        this.regexps.push(new RegExp(buffer.join('')));
                    } else {
                        var last = method.parameters.length - 1;

                        while (last != 0) {
                            var buffer = [];

                            buffer.push("^");

                            if (scope.length > 0) {
                                buffer.push('/', scope.join('/'));
                            }

                            for (var i = 1; i < (last + 1); i++) {
                                var parameter = method.parameters[i];

                                if (parameter.type.name == 'number') {
                                    buffer.push('/([0-9]*)');
                                } else if (parameter.type.name == 'boolean') {
                                    buffer.push('/(true|false)');
                                } else {
                                    buffer.push('/([^/]+)');
                                }
                            }

                            buffer.push('$');

                            this.regexps.push(new RegExp(buffer.join('')));

                            if (!method.parameters[last].isOptional) {
                                break;
                            }

                            last = last - 1;
                        }
                    }
                };

                WildcardRoute.prototype.arguments = function (url) {
                    var arguments = [];

                    for (var n in this.regexps) {
                        var match = this.regexps[n].exec(url);

                        if (match) {
                            var method = this.moduleExport.type;

                            var index = 0;

                            for (var n in match) {
                                if (n != '0' && n != 'index' && n != 'input') {
                                    var arg = match[n];

                                    if (method.parameters[index + 1].type.name == 'number') {
                                        arg = parseFloat(arg);
                                    }

                                    if (method.parameters[index + 1].type.name == 'boolean') {
                                        arg = (arg == 'true');
                                    }
                                    arguments.push(arg);

                                    index += 1;
                                }
                            }

                            return arguments;
                        }
                    }

                    return arguments;
                };
                return WildcardRoute;
            })();
            routing.WildcardRoute = WildcardRoute;
        })(web.routing || (web.routing = {}));
        var routing = web.routing;
    })(appex.web || (appex.web = {}));
    var web = appex.web;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (web) {
        (function (routing) {
            var NamedRoute = (function () {
                function NamedRoute(moduleExport) {
                    this.moduleExport = moduleExport;
                    this.type = 'named';

                    this.accessor = this.moduleExport.accessor();

                    this.attribute = this.moduleExport.attribute();

                    this.initialize();
                }
                NamedRoute.prototype.match_verbs = function (context) {
                    if (!this.attribute.verbs) {
                        return true;
                    }

                    if (this.attribute.verbs) {
                        if (appex.util.TypeCheck.isArray(this.attribute.verbs)) {
                            for (var i = 0; i < this.attribute.verbs.length; i++) {
                                if (appex.util.TypeCheck.isString(this.attribute.verbs[i])) {
                                    if (this.attribute.verbs[i].toLowerCase() == context.request.method.toLowerCase()) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }

                    return false;
                };

                NamedRoute.prototype.match_urls = function (context) {
                    var url = node.url.parse(context.request.url);

                    if (!this.attribute.urls) {
                        return this.pathname == url.pathname;
                    }

                    if (this.attribute.urls) {
                        if (appex.util.TypeCheck.isArray(this.attribute.urls)) {
                            for (var i = 0; i < this.attribute.urls.length; i++) {
                                if (appex.util.TypeCheck.isString(this.attribute.urls[i])) {
                                    if (this.attribute.urls[i] == url.pathname) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }

                    return false;
                };

                NamedRoute.prototype.invoke = function (context) {
                    var _this = this;
                    var func_stack = [];

                    var next = function () {
                        if (func_stack.length > 0) {
                            var func = func_stack.pop();

                            context.next = next;

                            func(context);
                        } else {
                            _this.accessor(context);
                        }
                    };

                    if (this.attribute.use) {
                        if (appex.util.TypeCheck.isArray(this.attribute.use)) {
                            for (var i = (this.attribute.use.length - 1); i >= 0; i--) {
                                if (appex.util.TypeCheck.isFunction(context.attribute.use[i])) {
                                    func_stack.push(this.attribute.use[i]);
                                }
                            }

                            next();

                            return;
                        }
                    }

                    this.accessor(context);
                };

                NamedRoute.prototype.match = function (context) {
                    if (this.match_verbs(context)) {
                        return this.match_urls(context);
                    }

                    return false;
                };

                NamedRoute.prototype.handler = function (context) {
                    context.attribute = this.attribute;

                    this.invoke(context);

                    return true;
                };

                NamedRoute.prototype.urls = function () {
                    return [this.pathname];
                };

                NamedRoute.prototype.initialize = function () {
                    var method = this.moduleExport.type;

                    var scope = method.scope;

                    if (scope.length > 0) {
                        if (scope[0].indexOf('"') !== -1) {
                            scope = scope.slice(1);
                        }
                    }

                    if (scope.length == 0) {
                        this.pathname = '/' + method.name;
                    } else {
                        this.pathname = '/' + scope.join('/') + '/' + method.name;
                    }
                };
                return NamedRoute;
            })();
            routing.NamedRoute = NamedRoute;
        })(web.routing || (web.routing = {}));
        var routing = web.routing;
    })(appex.web || (appex.web = {}));
    var web = appex.web;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (web) {
        (function (routing) {
            var IndexRoute = (function () {
                function IndexRoute(moduleExport) {
                    this.moduleExport = moduleExport;
                    this.type = 'index';

                    this.accessor = this.moduleExport.accessor();

                    this.attribute = this.moduleExport.attribute();

                    this.initialize();
                }
                IndexRoute.prototype.match_verbs = function (context) {
                    if (!this.attribute.verbs) {
                        return true;
                    }

                    if (this.attribute.verbs) {
                        if (appex.util.TypeCheck.isArray(this.attribute.verbs)) {
                            for (var i = 0; i < this.attribute.verbs.length; i++) {
                                if (appex.util.TypeCheck.isString(this.attribute.verbs[i])) {
                                    if (this.attribute.verbs[i].toLowerCase() == context.request.method.toLowerCase()) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }

                    return false;
                };

                IndexRoute.prototype.match_urls = function (context) {
                    var url = node.url.parse(context.request.url);

                    if (!this.attribute.urls) {
                        return this.pathname == url.pathname;
                    }

                    if (this.attribute.urls) {
                        if (appex.util.TypeCheck.isArray(this.attribute.urls)) {
                            for (var i = 0; i < this.attribute.urls.length; i++) {
                                if (appex.util.TypeCheck.isString(this.attribute.urls[i])) {
                                    if (this.attribute.urls[i] == url.pathname) {
                                        return true;
                                    }
                                }
                            }
                        }
                    }

                    return false;
                };

                IndexRoute.prototype.invoke = function (context) {
                    var _this = this;
                    var func_stack = [];

                    var next = function () {
                        if (func_stack.length > 0) {
                            var func = func_stack.pop();

                            context.next = next;

                            func(context);
                        } else {
                            _this.accessor(context);
                        }
                    };

                    if (this.attribute.use) {
                        if (appex.util.TypeCheck.isArray(this.attribute.use)) {
                            for (var i = (this.attribute.use.length - 1); i >= 0; i--) {
                                if (appex.util.TypeCheck.isFunction(context.attribute.use[i])) {
                                    func_stack.push(this.attribute.use[i]);
                                }
                            }

                            next();

                            return;
                        }
                    }

                    this.accessor(context);
                };

                IndexRoute.prototype.match = function (context) {
                    if (this.match_verbs(context)) {
                        return this.match_urls(context);
                    }

                    return false;
                };

                IndexRoute.prototype.handler = function (context) {
                    context.attribute = this.attribute;

                    this.invoke(context);

                    return true;
                };

                IndexRoute.prototype.urls = function () {
                    return [this.pathname];
                };

                IndexRoute.prototype.initialize = function () {
                    var method = this.moduleExport.type;

                    var scope = method.scope;

                    if (scope.length > 0) {
                        if (scope[0].indexOf('"') !== -1) {
                            scope = scope.slice(1);
                        }
                    }

                    if (scope.length == 0) {
                        this.pathname = '/';
                    } else {
                        this.pathname = '/' + scope.join('/');
                    }
                };
                return IndexRoute;
            })();
            routing.IndexRoute = IndexRoute;
        })(web.routing || (web.routing = {}));
        var routing = web.routing;
    })(appex.web || (appex.web = {}));
    var web = appex.web;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (web) {
        (function (routing) {
            var ModuleRouter = (function () {
                function ModuleRouter(module) {
                    this.module = module;
                    this.routes = [];

                    this.initialize();
                }
                ModuleRouter.prototype.handler = function (context) {
                    for (var n in this.routes) {
                        var route = this.routes[n];

                        if (route.match(context)) {
                            return route.handler(context);
                        }
                    }

                    return false;
                };

                ModuleRouter.prototype.initialize = function () {
                    this.routes = [];

                    for (var n in this.module.exports) {
                        var moduleExport = this.module.exports[n];

                        if (moduleExport.type.identifier == 'method') {
                            var route = this.resolve_route_from_export(moduleExport);

                            if (route) {
                                this.routes.push(route);
                            }
                        }
                    }
                };

                ModuleRouter.prototype.resolve_route_from_export = function (moduleExport) {
                    var method = moduleExport.type;

                    if (this.validate_index_signature(method)) {
                        return new appex.web.routing.IndexRoute(moduleExport);
                    }

                    if (this.validate_wildcard_signature(method)) {
                        return new appex.web.routing.WildcardRoute(moduleExport);
                    }

                    if (this.validate_named_signature(method)) {
                        return new appex.web.routing.NamedRoute(moduleExport);
                    }

                    return null;
                };

                ModuleRouter.prototype.validate_wildcard_signature = function (method) {
                    if (method.name == 'wildcard') {
                        if (method.parameters.length > 1) {
                            return true;
                        }
                    }

                    return false;
                };

                ModuleRouter.prototype.validate_index_signature = function (method) {
                    if (method.name == 'index') {
                        if (method.parameters.length == 1) {
                            return true;
                        }
                    }

                    return false;
                };

                ModuleRouter.prototype.validate_named_signature = function (method) {
                    if (method.parameters.length == 1) {
                        return true;
                    }

                    return false;
                };
                return ModuleRouter;
            })();
            routing.ModuleRouter = ModuleRouter;
        })(web.routing || (web.routing = {}));
        var routing = web.routing;
    })(appex.web || (appex.web = {}));
    var web = appex.web;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (web) {
        var DevelopmentServer = (function () {
            function DevelopmentServer(options) {
                this.options = options;
                this.compiler = new appex.compiler.Compiler();

                this.mime = new appex.web.media.Mime();

                this.module = null;

                this.schema = null;

                this.router = null;

                this.sitemap = null;

                this.template = new appex.templates.Engine({ devmode: true });

                this.waiters = [];

                this.compiling = false;

                this.options.stdout.write('appex \033[32m- development server\033[0m\n');
            }
            DevelopmentServer.prototype.listen = function (port) {
                var protocol = this.options.protocol == "http" ? node.http : node.https;

                var that = this;

                this.server = protocol.createServer(function (request, response, next) {
                    that.handler(request, response, null);
                });

                this.server.listen(port);
            };

            DevelopmentServer.prototype.handler = function (request, response, next) {
                this.waiters.push(new appex.web.Waiter(request, response, next));

                var that = this;

                this.compile(function (diagnostics) {
                    if (diagnostics) {
                        that.errors(diagnostics);

                        return;
                    }

                    while (that.waiters.length > 0) {
                        var waiter = that.waiters.pop();

                        var context = that.load_context(waiter.request, waiter.response, waiter.next);

                        var handled = that.router.handler(context);

                        if (handled) {
                            if (that.options.logging) {
                                var message = [];

                                message.push('\033[32m[', waiter.stopwatch.elapsed(), 'ms]\033[0m ');

                                message.push(context.request.method, ' ');

                                message.push(context.request.url, '\n');

                                that.options.stdout.write(message.join(''));
                            }
                        } else {
                            if (context.next) {
                                context.next();
                            }
                        }
                    }
                });
            };

            DevelopmentServer.prototype.load_context = function (request, response, next) {
                var context = new appex.web.Context();

                if (this.options.context) {
                    for (var n in this.options.context) {
                        context[n] = this.options.context[n];
                    }
                }

                context.request = appex.web.BindRequest(request);

                context.response = appex.web.BindResponse(response, context.request.cookies);

                context.next = function () {
                };

                context.module = this.module;

                context.schema = this.schema;

                context.router = this.router;

                context.sitemap = this.sitemap;

                context.template = this.template;

                context.mime = this.mime;

                if (next) {
                    context.next = next;
                }

                context.attribute = {};

                return context;
            };

            DevelopmentServer.prototype.compile = function (callback) {
                if (!this.compiling) {
                    this.compiling = true;

                    var that = this;

                    this.compiler.compile(this.options.program, function (result) {
                        that.compiling = false;

                        if (result.diagnostics.length > 0) {
                            callback(result.diagnostics);

                            return;
                        }

                        that.module = new appex.modules.Module(result);

                        that.router = new appex.web.routing.ModuleRouter(that.module);

                        that.schema = new appex.schema.JsonSchema(that.module);

                        that.sitemap = new appex.web.sitemap.Sitemap(that.router);

                        callback(null);
                    });
                }
            };

            DevelopmentServer.prototype.errors = function (diagnostics) {
                while (this.waiters.length > 0) {
                    var request = this.waiters.pop();

                    request.response.writeHead(500, { 'content-type': 'text/plain' });

                    for (var n in diagnostics) {
                        var diagnostic = diagnostics[n];

                        var message = [];

                        message.push(diagnostic.path);

                        message.push(" [", (diagnostic.line_index + 1).toString(), ":", (diagnostic.char_index + 1).toString(), "] ");

                        message.push(diagnostic.message, '\n');

                        request.response.write(message.join(''));

                        if (this.options.logging) {
                            this.options.stderr.write(message.join(''));
                        }
                    }

                    request.response.end();
                }
            };

            DevelopmentServer.prototype.dispose = function () {
                this.compiler.dispose();

                if (this.module) {
                    this.module.dispose();
                }
            };
            return DevelopmentServer;
        })();
        web.DevelopmentServer = DevelopmentServer;
    })(appex.web || (appex.web = {}));
    var web = appex.web;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (web) {
        function NormalizeServerOptions(options) {
            if (options.program == null) {
                throw new Error('appex.web.IServerOptions: sourcefile is required.');
            }

            if (options.devmode == null) {
                options.devmode = false;
            }

            if (options.logging == null) {
                options.logging = false;
            }

            if (options.protocol == null) {
                options.protocol = "http";
            } else {
                if (options.protocol != "http" && options.protocol != "https") {
                    throw new Error('appex.web.IServerOptions: the option \"' + options.protocol + '\" is not a valid server protocol.');
                }
            }

            if (options.context == null) {
                options.context = {};
            }

            if (options.stdout == null) {
                options.stdout = process.stdout;
            }

            if (options.stderr == null) {
                options.stderr = process.stderr;
            }

            return options;
        }
        web.NormalizeServerOptions = NormalizeServerOptions;
    })(appex.web || (appex.web = {}));
    var web = appex.web;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (web) {
        function BindResponse(response, cookies) {
            var _response = response;

            if (!_response.headers)
                _response.headers = {};

            if (!_response.send)
                _response.send = send;

            if (!_response.html)
                _response.html = html;

            if (!_response.serve)
                _response.serve = serve;

            if (!_response.json)
                _response.json = json;

            if (!_response.jsonp)
                _response.jsonp = jsonp;

            if (!_response.redirect)
                _response.redirect = redirect;

            if (!_response.cookies)
                _response.cookies = cookies;

            return _response;
        }
        web.BindResponse = BindResponse;

        function writeHead(statusCode, response) {
            var header = [];

            for (var n in response.headers) {
                header.push([n, response.headers[n]]);
            }

            response.cookies.each(function (cookie) {
                if (cookie.modified) {
                    header.push(['Set-Cookie', cookie.serialize()]);
                }
            });

            response.writeHead(statusCode, header);
        }

        function handleException(response, error) {
            response.headers['Content-Type'] = 'text/plain';

            response.headers['Content-Length'] = error.stack.length;

            writeHead(500, response);

            response.write(error.stack);

            response.end();
        }

        function send() {
            var params = [];
            for (var _i = 0; _i < (arguments.length - 0); _i++) {
                params[_i] = arguments[_i + 0];
            }
            var response = this;

            var _send = function (status, data) {
                try  {
                    if (!response.headers['Content-Type']) {
                        response.headers['Content-Type'] = 'text/plain';
                    }

                    response.headers['Content-Length'] = data.length;

                    writeHead(status, response);

                    response.write(data);

                    response.end();
                } catch (exception) {
                    handleException(response, exception);
                }
            };

            if (typeof params[0] == "number") {
                _send(params[0], params[1]);
            } else {
                _send(200, params[0]);
            }
        }

        function html() {
            var params = [];
            for (var _i = 0; _i < (arguments.length - 0); _i++) {
                params[_i] = arguments[_i + 0];
            }
            var response = this;

            var _send = function (status, data) {
                try  {
                    response.headers['Content-Type'] = 'text/html';

                    response.headers['Content-Length'] = data.length;

                    writeHead(status, response);

                    response.write(data);

                    response.end();
                } catch (exception) {
                    handleException(response, exception);
                }
            };

            if (typeof params[0] == "number") {
                _send(params[0], params[1]);
            } else {
                _send(200, params[0]);
            }
        }

        function serve() {
            var params = [];
            for (var _i = 0; _i < (arguments.length - 0); _i++) {
                params[_i] = arguments[_i + 0];
            }
            var response = this;

            var not_found = function (filepath) {
                var message = filepath + ' not found.';

                response.headers['Content-Type'] = mime;

                response.headers['Content-Length'] = message.length;

                writeHead(404, response);

                response.write(message);

                response.end();
            };

            var _serve = function (root, filepath, mime) {
                if (filepath.indexOf('..') !== -1) {
                    not_found(filepath);

                    return;
                }

                root = node.path.join(root, filepath);

                node.fs.stat(root, function (error, stats) {
                    if (error) {
                        not_found(filepath);

                        return;
                    }

                    if (stats.isDirectory()) {
                        not_found(filepath);

                        return;
                    }

                    try  {
                        response.headers['Content-Type'] = mime;

                        response.headers['Content-Length'] = stats.size;

                        writeHead(200, response);

                        var readstream = node.fs.createReadStream(root, { bufferSize: 1024 });

                        readstream.pipe(response);
                    } catch (exception) {
                        handleException(response, exception);
                    }
                });
            };

            if (params.length == 1) {
                var mimetype = response.headers['Content-Type'];

                if (!mimetype) {
                    var mime = new appex.web.media.Mime();

                    mimetype = mime.lookup(params[0]);
                }

                _serve('', params[0], mimetype);
            }

            if (params.length == 2) {
                var mimetype = response.headers['Content-Type'];

                if (!mimetype) {
                    var mime = new appex.web.media.Mime();

                    mimetype = mime.lookup(params[1]);
                }

                _serve(params[0], params[1], mimetype);
            }

            if (params.length == 3) {
                _serve(params[0], params[1], params[2]);
            }
        }

        function json() {
            var params = [];
            for (var _i = 0; _i < (arguments.length - 0); _i++) {
                params[_i] = arguments[_i + 0];
            }
            var response = this;

            var _json = function (status, obj) {
                try  {
                    var data = JSON.stringify(obj, null, 4);

                    response.headers['Content-Type'] = 'application/json';

                    response.headers['Content-Length'] = data.length;

                    writeHead(status, response);

                    response.write(data);

                    response.end();
                } catch (exception) {
                    handleException(response, exception);
                }
            };

            if (typeof params[0] == "number") {
                if (params.length == 1) {
                    _json(200, params[0]);
                } else {
                    _json(params[0], params[1]);
                }
            } else {
                _json(200, params[0]);
            }
        }

        function jsonp() {
            var params = [];
            for (var _i = 0; _i < (arguments.length - 0); _i++) {
                params[_i] = arguments[_i + 0];
            }
            var response = this;

            var _jsonp = function (status, obj, callback) {
                try  {
                    var data = JSON.stringify(obj, null, 4);

                    data = [callback, ' && ', callback, '(', data, ');'].join('');

                    response.headers['Content-Type'] = 'text/javascript';

                    response.headers['Content-Length'] = data.length;

                    writeHead(status, response);

                    response.write(data);

                    response.end();
                } catch (exception) {
                    handleException(response, exception);
                }
            };

            if (params.length == 1) {
                _jsonp(200, params[0], 'callback');
            }

            if (params.length == 2) {
                _jsonp(params[0], params[1], 'callback');
            }

            if (params.length == 3) {
                _jsonp(params[0], params[1], params[2]);
            }
        }

        function redirect() {
            var params = [];
            for (var _i = 0; _i < (arguments.length - 0); _i++) {
                params[_i] = arguments[_i + 0];
            }
            var response = this;

            var _redirect = function (status, location) {
                try  {
                    response.headers['Location'] = location;

                    writeHead(status, response);

                    response.end();
                } catch (exception) {
                    handleException(response, exception);
                }
            };

            if (typeof params[0] == "number") {
                _redirect(params[0], params[1]);
            } else {
                _redirect(302, params[0]);
            }
        }
    })(appex.web || (appex.web = {}));
    var web = appex.web;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (web) {
        var Cookie = (function () {
            function Cookie(name, value, options) {
                this.name = name;
                this.value = value;
                this.options = options;
                this.options = this.options || {};

                this.modified = false;
            }
            Cookie.prototype.serialize = function () {
                this.options = this.options || {};

                var result = [this.name + '=' + encodeURIComponent(this.value)];

                if (this.options.maxage)
                    result.push('Max-Age=' + this.options.maxage);

                if (this.options.domain)
                    result.push('Domain=' + this.options.domain);

                if (this.options.expires)
                    result.push('Expires=' + this.options.expires.toUTCString());

                if (this.options.path)
                    result.push('Path=' + this.options.path);

                if (this.options.httpOnly)
                    result.push('HttpOnly');

                if (this.options.secure)
                    result.push('Secure');

                return result.join('; ');
            };
            return Cookie;
        })();
        web.Cookie = Cookie;

        var CookieCollection = (function () {
            function CookieCollection(request) {
                this.setup(request);
            }
            CookieCollection.prototype.each = function (callback) {
                for (var i = 0; i < this.cookies.length; i++) {
                    callback(this.cookies[i]);
                }
            };

            CookieCollection.prototype.set = function (name, value, options) {
                var cookie = this.get(name);

                if (!cookie) {
                    cookie = new appex.web.Cookie(name, value, options);

                    this.cookies.push(cookie);
                }

                cookie.value = value;

                cookie.options = options;

                cookie.modified = true;
            };

            CookieCollection.prototype.get = function (name) {
                for (var i = 0; i < this.cookies.length; i++) {
                    if (this.cookies[i].name == name) {
                        return this.cookies[i];
                    }
                }

                return null;
            };

            CookieCollection.prototype.setup = function (request) {
                this.cookies = [];

                if (request.headers.cookie) {
                    if (typeof (request.headers.cookie) === 'string') {
                        var split = request.headers.cookie.split(/[;,] */);

                        for (var i = 0; i < split.length; i++) {
                            var idx = split[i].indexOf('=');

                            if (idx < 0)
                                continue;

                            var name = split[i].substr(0, idx).trim();

                            var value = split[i].substr(++idx, split[i].length).trim();

                            if (value[0] == '"') {
                                value = value.slice(1, -1);
                            }

                            try  {
                                var temp = decodeURIComponent(value);

                                value = temp;
                            } catch (e) {
                            }

                            var cookie = new appex.web.Cookie(name, value, {});

                            cookie.modified = false;

                            this.cookies.push(cookie);
                        }
                    }
                }
            };
            return CookieCollection;
        })();
        web.CookieCollection = CookieCollection;
    })(appex.web || (appex.web = {}));
    var web = appex.web;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (web) {
        var RequestBody = (function () {
            function RequestBody(request) {
                this.request = request;
            }
            RequestBody.prototype.recv = function (callback) {
                var buffer = [];

                this.request.on('data', function (data) {
                    buffer.push(data);
                });

                this.request.on('end', function () {
                    callback(buffer.join(''));
                });
            };

            RequestBody.prototype.json = function (callback) {
                this.recv(function (data) {
                    try  {
                        var obj = JSON.parse(data);

                        callback(obj);
                    } catch (e) {
                        callback(null);
                    }
                });
            };

            RequestBody.prototype.form = function (callback) {
                this.recv(function (data) {
                    try  {
                        var obj = node.querystring.parse(data);

                        callback(obj);
                    } catch (e) {
                        callback(null);
                    }
                });
            };
            return RequestBody;
        })();
        web.RequestBody = RequestBody;

        function BindRequest(request) {
            var _request = request;

            if (!_request.body)
                _request.body = new appex.web.RequestBody(request);

            if (!_request.cookies)
                _request.cookies = new appex.web.CookieCollection(request);

            return _request;
        }
        web.BindRequest = BindRequest;
    })(appex.web || (appex.web = {}));
    var web = appex.web;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (web) {
        (function (sitemap) {
            var SitemapNode = (function () {
                function SitemapNode() {
                }
                return SitemapNode;
            })();
            sitemap.SitemapNode = SitemapNode;
        })(web.sitemap || (web.sitemap = {}));
        var sitemap = web.sitemap;
    })(appex.web || (appex.web = {}));
    var web = appex.web;
})(appex || (appex = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var appex;
(function (appex) {
    (function (web) {
        (function (sitemap) {
            var Sitemap = (function (_super) {
                __extends(Sitemap, _super);
                function Sitemap(router) {
                    _super.call(this);

                    this.name = 'sitemap';

                    this.initialize(router);
                }
                Sitemap.prototype.get = function (qualifier) {
                    if (qualifier == '') {
                        return this;
                    }

                    var stack = qualifier.split('.');

                    var current = this;

                    for (var n in stack) {
                        var found = false;

                        for (var m in current.nodes) {
                            if (current.nodes[m].name == stack[n]) {
                                current = current.nodes[m];

                                found = true;

                                break;
                            }
                        }

                        if (!found) {
                            return null;
                        }
                    }

                    return current;
                };

                Sitemap.prototype.initialize = function (router) {
                    var fix_scope = function (scope) {
                        var result = [];

                        for (var n in scope) {
                            if (scope[n].indexOf('\"') == -1) {
                                result.push(scope[n]);
                            }
                        }

                        return result;
                    };

                    var apply_attribute = function (node, attribute) {
                        for (var n in attribute) {
                            if (n != 'use') {
                                node[n] = attribute[n];
                            }
                        }
                    };

                    for (var n in router.routes) {
                        var route = router.routes[n];

                        switch (route.type) {
                            case 'index':

                            case 'named':

                            case 'wildcard':
                                var type = route.moduleExport.type;

                                var scope = fix_scope(type.scope);

                                var name = type.name;

                                var current = this;

                                if (!current.nodes)
                                    current.nodes = [];

                                for (var n in scope) {
                                    if (current.nodes) {
                                        var found = false;

                                        for (var m in current.nodes) {
                                            if (current.nodes[m].name == scope[n]) {
                                                found = true;

                                                current = current.nodes[m];

                                                break;
                                            }
                                        }

                                        if (!found) {
                                            var node = new appex.web.sitemap.SitemapNode();

                                            node.name = scope[n];

                                            node.nodes = [];

                                            current.nodes.push(node);

                                            current = node;
                                        }
                                    }
                                }

                                var node = new appex.web.sitemap.SitemapNode();

                                node.name = type.name;

                                node.urls = route.urls();

                                apply_attribute(node, route.moduleExport.attribute());

                                current.nodes.push(node);

                                break;

                            default:
                                break;
                        }
                    }
                };
                return Sitemap;
            })(sitemap.SitemapNode);
            sitemap.Sitemap = Sitemap;
        })(web.sitemap || (web.sitemap = {}));
        var sitemap = web.sitemap;
    })(appex.web || (appex.web = {}));
    var web = appex.web;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (schema) {
        var JsonSchemaValidatorError = (function () {
            function JsonSchemaValidatorError(message) {
                this.message = message;
            }
            return JsonSchemaValidatorError;
        })();
        schema.JsonSchemaValidatorError = JsonSchemaValidatorError;
    })(appex.schema || (appex.schema = {}));
    var schema = appex.schema;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (util) {
        var TypeCheck = (function () {
            function TypeCheck() {
            }
            TypeCheck.isBoolean = function (instance) {
                return (typeof instance) === 'boolean';
            };

            TypeCheck.isInteger = function (instance) {
                return (typeof instance === "number") && Math.floor(instance) === instance;
            };

            TypeCheck.isNumber = function (instance) {
                return (typeof instance === "number");
            };

            TypeCheck.isArray = function (instance) {
                return Object.prototype.toString.call(instance) === '[object Array]';
            };

            TypeCheck.isString = function (instance) {
                return (typeof instance) === 'string';
            };

            TypeCheck.isObject = function (instance) {
                return (typeof instance) === 'object' && !TypeCheck.isArray(instance);
            };

            TypeCheck.isFunction = function (instance) {
                return (typeof instance) === 'function';
            };
            return TypeCheck;
        })();
        util.TypeCheck = TypeCheck;
    })(appex.util || (appex.util = {}));
    var util = appex.util;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (schema) {
        var JsonSchemaValidator = (function () {
            function JsonSchemaValidator() {
            }
            JsonSchemaValidator.prototype.get_referenced_schema = function (uri) {
                for (var i = 0; i < this.schemas.length; i++) {
                    if (this.schemas[i].id == uri) {
                        return this.schemas[i];
                    }
                }

                return null;
            };

            JsonSchemaValidator.prototype.validate_object = function (name, object, schema) {
                this.schemas.push(schema);

                if (schema.$ref) {
                    var _schema = this.get_referenced_schema(schema.$ref);

                    if (!_schema) {
                        this.errors.push(new appex.schema.JsonSchemaValidatorError('cannot de-reference type\'' + schema.$ref + '\''));

                        return;
                    }

                    schema = _schema;
                }

                switch (schema.type) {
                    case 'object':
                        if (!appex.util.TypeCheck.isObject(object)) {
                            this.errors.push(new appex.schema.JsonSchemaValidatorError(name + ' is not a object'));
                        }

                        break;

                    case 'string':
                        if (!appex.util.TypeCheck.isString(object)) {
                            this.errors.push(new appex.schema.JsonSchemaValidatorError(name + ' is not a string'));
                        }
                        break;

                    case 'number':
                        if (!appex.util.TypeCheck.isNumber(object)) {
                            this.errors.push(new appex.schema.JsonSchemaValidatorError(name + ' is not a number'));
                        }

                        break;

                    case 'boolean':
                        if (!appex.util.TypeCheck.isBoolean(object)) {
                            this.errors.push(new appex.schema.JsonSchemaValidatorError(name + ' is not a boolean'));
                        }
                        break;

                    case 'array':
                        if (!appex.util.TypeCheck.isArray(object)) {
                            this.errors.push(new appex.schema.JsonSchemaValidatorError(name + ' is not a array'));
                        } else {
                            for (var i = 0; i < object.length; i++) {
                                this.validate_object(name + '[' + i.toString() + ']', object[i], schema.items);
                            }
                        }

                        break;

                    default:
                        break;
                }

                for (var property_name in schema.properties) {
                    var property = object[property_name];

                    var property_schema = schema.properties[property_name];

                    if (property_schema.required) {
                        if (!property) {
                            this.errors.push(new appex.schema.JsonSchemaValidatorError(name + '.' + property_name + ' is required.'));
                        }
                    }

                    if (property) {
                        this.validate_object(name + '.' + property_name, property, property_schema);
                    }
                }

                if (!appex.util.TypeCheck.isArray(object) && !appex.util.TypeCheck.isString(object)) {
                    for (var property_name in object) {
                        if (schema.type != 'any') {
                            var property_schema = schema.properties[property_name];

                            if (!property_schema) {
                                this.errors.push(new appex.schema.JsonSchemaValidatorError(name + '.' + property_name + ' unexpected property'));
                            }
                        }
                    }
                }
            };

            JsonSchemaValidator.prototype.validate = function (object, schema) {
                this.errors = [];

                this.schemas = [];

                this.validate_object('instance', object, schema);

                return (this.errors.length > 0) ? this.errors : null;
            };
            return JsonSchemaValidator;
        })();
        schema.JsonSchemaValidator = JsonSchemaValidator;
    })(appex.schema || (appex.schema = {}));
    var schema = appex.schema;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (schema) {
        var JsonSchemaNode = (function () {
            function JsonSchemaNode() {
            }
            return JsonSchemaNode;
        })();
        schema.JsonSchemaNode = JsonSchemaNode;
    })(appex.schema || (appex.schema = {}));
    var schema = appex.schema;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (schema) {
        var JsonSchemaGenerator = (function () {
            function JsonSchemaGenerator(reflection) {
                this.reflection = reflection;
            }
            JsonSchemaGenerator.prototype.get_schema_compatible_typename = function (typename) {
                switch (typename) {
                    case 'any':
                        return 'any';

                    case 'Date':
                        return 'string';

                    case 'RegExp':
                        return 'string';
                }

                return typename;
            };

            JsonSchemaGenerator.prototype.is_declared = function (qualified_typename_stack, qualified_typename) {
                for (var n in qualified_typename_stack) {
                    if (qualified_typename_stack[n] == qualified_typename) {
                        return true;
                    }
                }

                return false;
            };

            JsonSchemaGenerator.prototype.get_description = function (reflected_type) {
                var handle = reflected_type;

                if (handle.comments) {
                    if (Object.prototype.toString.call(handle.comments) === '[object Array]') {
                        if (handle.comments.length > 0) {
                            var comment = handle.comments[0];

                            comment = comment.replace(/\*/g, '').replace(/\//g, '').trim();

                            return comment;
                        }
                    }
                }

                return null;
            };

            JsonSchemaGenerator.prototype.get_variables = function (qualified_names, interface) {
                var variables = [];

                for (var n in interface.extends) {
                    var qualified_type_name = this.reflection.typename(interface.extends[n]);

                    var base_interface = this.reflection.get(qualified_type_name);

                    if (base_interface) {
                        var base_interface_variables = this.get_variables(qualified_names, base_interface);

                        for (var m in base_interface_variables) {
                            var base_interface_variable = base_interface_variables[m];

                            variables.push(base_interface_variable);
                        }
                    }
                }

                for (var n in interface.variables) {
                    var variable = interface.variables[n];

                    variables.push(variable);
                }

                return variables;
            };

            JsonSchemaGenerator.prototype.get_schema_object = function (qualified_typename_stack, interface) {
                var qualified_typename = this.reflection.typename(interface);

                if (!this.is_declared(qualified_typename_stack, qualified_typename)) {
                    qualified_typename_stack.push(qualified_typename);

                    var type = new appex.schema.JsonSchemaNode();

                    type.id = qualified_typename;

                    type.type = 'object';

                    var description = this.get_description(interface);

                    if (description) {
                        type.description = description;
                    }

                    var variables = this.get_variables(qualified_typename_stack, interface);

                    type.properties = variables.length > 0 ? {} : undefined;

                    for (var n in variables) {
                        var variable = variables[n];

                        var property = this.get_schema_property(qualified_typename_stack, variable);

                        switch (interface.identifier) {
                            case 'interface':
                                property.required = !variable.isOptional;

                                type.properties[variable.name] = property;

                                break;

                            case 'class':
                                if (variable.isPublic) {
                                    property.required = true;

                                    type.properties[variable.name] = property;
                                }

                                break;
                        }
                    }

                    return type;
                } else {
                    var type = new appex.schema.JsonSchemaNode();

                    type.type = 'object';

                    type.$ref = qualified_typename;

                    return type;
                }
            };

            JsonSchemaGenerator.prototype.get_schema_property = function (qualified_typename_stack, variable) {
                var qualified_typename = this.reflection.typename(variable.type);

                var reflected_type = this.reflection.get(qualified_typename);

                if (reflected_type) {
                    if (variable.type.arrayCount == 0) {
                        var schema = this.load_reflected_type(qualified_typename_stack, reflected_type);

                        return schema;
                    } else {
                        var array_schema = new appex.schema.JsonSchemaNode();

                        array_schema.type = 'array';

                        var description = this.get_description(variable);

                        if (description) {
                            array_schema.description = description;
                        }

                        var item_schema = this.load_reflected_type(qualified_typename_stack, reflected_type);

                        array_schema.items = item_schema;

                        return array_schema;
                    }
                } else {
                    if (variable.type.arrayCount == 0) {
                        var schema = new appex.schema.JsonSchemaNode();

                        schema.type = variable.type.name;

                        var description = this.get_description(variable);

                        if (description) {
                            schema.description = description;
                        }

                        return schema;
                    } else {
                        var array_schema = new appex.schema.JsonSchemaNode();

                        array_schema.type = 'array';

                        var description = this.get_description(variable);

                        if (description) {
                            array_schema.description = description;
                        }

                        var item_schema = new appex.schema.JsonSchemaNode();

                        item_schema.type = variable.type.name;

                        array_schema.items = item_schema;

                        return array_schema;
                    }
                }
            };

            JsonSchemaGenerator.prototype.load_reflected_type = function (qualified_typename_stack, reflection_type) {
                switch (reflection_type.identifier) {
                    case 'class':
                        return this.get_schema_object(qualified_typename_stack, reflection_type);

                        break;

                    case 'interface':
                        return this.get_schema_object(qualified_typename_stack, reflection_type);

                        break;

                    case 'variable':
                        return this.get_schema_property(qualified_typename_stack, reflection_type);

                        break;

                    default:
                        return null;
                }

                return null;
            };

            JsonSchemaGenerator.prototype.get = function (qualifier) {
                var qualified_typename_stack = [];

                var reflected_type = this.reflection.get(qualifier);

                if (reflected_type) {
                    return this.load_reflected_type(qualified_typename_stack, reflected_type);
                }

                return null;
            };
            return JsonSchemaGenerator;
        })();
        schema.JsonSchemaGenerator = JsonSchemaGenerator;
    })(appex.schema || (appex.schema = {}));
    var schema = appex.schema;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (schema) {
        var JsonSchema = (function () {
            function JsonSchema(module) {
                this.module = module;
            }
            JsonSchema.prototype.get = function (qualifier) {
                var generator = new appex.schema.JsonSchemaGenerator(this.module.reflection);

                return generator.get(qualifier);
            };

            JsonSchema.prototype.validate = function (qualifier, object) {
                if (object == null) {
                    return [new appex.schema.JsonSchemaValidatorError('unable to validate null object.')];
                }

                var generator = new appex.schema.JsonSchemaGenerator(this.module.reflection);

                var schema = generator.get(qualifier);

                if (schema) {
                    var validator = new appex.schema.JsonSchemaValidator();

                    return validator.validate(object, schema);
                }

                return null;
            };
            return JsonSchema;
        })();
        schema.JsonSchema = JsonSchema;
    })(appex.schema || (appex.schema = {}));
    var schema = appex.schema;
})(appex || (appex = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var appex;
(function (appex) {
    (function (templates) {
        var Declaration = (function () {
            function Declaration(type, start, length, body_start, body_length) {
                this.type = type;
                this.start = start;
                this.length = length;
                this.body_start = body_start;
                this.body_length = body_length;
                this.declarations = [];
            }
            return Declaration;
        })();
        templates.Declaration = Declaration;

        var Document = (function (_super) {
            __extends(Document, _super);
            function Document(filename, content) {
                _super.call(this, 'document', 0, content.length, 0, content.length);

                this.content = content;

                this.filename = filename;

                var scanner = new appex.templates.Scanner(this, content);

                this.declarations = scanner.declarations;
            }
            return Document;
        })(appex.templates.Declaration);
        templates.Document = Document;

        var LayoutDeclaration = (function (_super) {
            __extends(LayoutDeclaration, _super);
            function LayoutDeclaration(filename, start, length) {
                this.filename = filename;

                _super.call(this, 'layout', start, length, 0, 0);
            }
            return LayoutDeclaration;
        })(appex.templates.Declaration);
        templates.LayoutDeclaration = LayoutDeclaration;

        var RenderDeclaration = (function (_super) {
            __extends(RenderDeclaration, _super);
            function RenderDeclaration(filename, start, length) {
                this.filename = filename;

                _super.call(this, 'render', start, length, 0, 0);
            }
            return RenderDeclaration;
        })(appex.templates.Declaration);
        templates.RenderDeclaration = RenderDeclaration;

        var SectionDeclaration = (function (_super) {
            __extends(SectionDeclaration, _super);
            function SectionDeclaration(content, name, start, length, body_start, body_length) {
                this.name = name;

                _super.call(this, 'section', start, length, body_start, body_length);

                var scanner = new appex.templates.Scanner(this, content);

                this.declarations = scanner.declarations;
            }
            return SectionDeclaration;
        })(appex.templates.Declaration);
        templates.SectionDeclaration = SectionDeclaration;

        var ForDeclaration = (function (_super) {
            __extends(ForDeclaration, _super);
            function ForDeclaration(content, expression, start, length, body_start, body_length) {
                this.expression = expression;

                _super.call(this, 'for', start, length, body_start, body_length);

                var scanner = new appex.templates.Scanner(this, content);

                this.declarations = scanner.declarations;
            }
            return ForDeclaration;
        })(appex.templates.Declaration);
        templates.ForDeclaration = ForDeclaration;

        var IfDeclaration = (function (_super) {
            __extends(IfDeclaration, _super);
            function IfDeclaration(content, expression, start, length, body_start, body_length) {
                this.expression = expression;

                _super.call(this, 'if', start, length, body_start, body_length);

                var scanner = new appex.templates.Scanner(this, content);

                this.declarations = scanner.declarations;
            }
            return IfDeclaration;
        })(appex.templates.Declaration);
        templates.IfDeclaration = IfDeclaration;

        var CodeDeclaration = (function (_super) {
            __extends(CodeDeclaration, _super);
            function CodeDeclaration(content, start, length, body_start, body_length) {
                _super.call(this, 'code', start, length, body_start, body_length);
            }
            return CodeDeclaration;
        })(appex.templates.Declaration);
        templates.CodeDeclaration = CodeDeclaration;

        var ExpressionDeclaration = (function (_super) {
            __extends(ExpressionDeclaration, _super);
            function ExpressionDeclaration(content, expression, start, length) {
                this.expression = expression;

                _super.call(this, 'expression', start, length, 0, 0);
            }
            return ExpressionDeclaration;
        })(appex.templates.Declaration);
        templates.ExpressionDeclaration = ExpressionDeclaration;

        var CommentDeclaration = (function (_super) {
            __extends(CommentDeclaration, _super);
            function CommentDeclaration(content, comment, start, length) {
                this.comment = comment;

                _super.call(this, 'comment', start, length, 0, 0);
            }
            return CommentDeclaration;
        })(appex.templates.Declaration);
        templates.CommentDeclaration = CommentDeclaration;

        var ContentDeclaration = (function (_super) {
            __extends(ContentDeclaration, _super);
            function ContentDeclaration(start, length) {
                _super.call(this, 'content', start, length, 0, 0);
            }
            return ContentDeclaration;
        })(appex.templates.Declaration);
        templates.ContentDeclaration = ContentDeclaration;

        var Scanner = (function () {
            function Scanner(declaration, content) {
                this.declaration = declaration;
                this.content = content;
                this.declarations = [];

                this.scan();
            }
            Scanner.prototype.max = function () {
                return (this.declaration.body_start + this.declaration.body_length);
            };

            Scanner.prototype.read = function (start, length) {
                return this.content.substr(start, length);
            };

            Scanner.prototype.advance = function (index) {
                for (var i = index; i < this.max(); i++) {
                    var code = this.content.charCodeAt(i);

                    if ((code >= 48 && code <= 57) || (code >= 65 && code <= 122) || code == 123 || code == 125 || code == 64 || code == 40 || code == 41 || code == 34 || code == 39) {
                        return i;
                    }
                }

                return this.max();
            };

            Scanner.prototype.advanceto = function (index, code) {
                for (var i = index; i < this.max(); i++) {
                    var _code = this.content.charCodeAt(i);

                    if (_code == code) {
                        return (i);
                    }
                }

                return this.max();
            };

            Scanner.prototype.scan_section = function (index) {
                var name = '';

                var start = index;

                var length = 0;

                var body_start = 0;

                var body_length = 0;

                var cursor = (index + 8);

                if (this.content.charCodeAt(cursor) != 32) {
                    return index;
                }

                cursor = this.advance(cursor);

                if (this.content.charAt(cursor) == '{') {
                    return index;
                }

                for (var i = cursor; i < this.max(); i++) {
                    var code = this.content.charCodeAt(i);

                    if (i == (this.max() - 1)) {
                        return index;
                    }

                    if ((code < 48 || code > 57) && (code < 65 || code > 122)) {
                        name = this.read(cursor, i - cursor);

                        cursor = i;

                        break;
                    }
                }

                var peek = this.advance(cursor);

                if (this.content.charAt(peek) != '{') {
                    var declaration = new appex.templates.SectionDeclaration(this.content, name, start, (cursor - index), 0, 0);

                    this.declarations.push(declaration);

                    return cursor;
                }

                var count = 0;

                for (var i = cursor; i < this.max(); i++) {
                    var ch = this.content.charAt(i);

                    if (ch == '{') {
                        if (count == 0) {
                            body_start = i + 1;
                        }

                        count += 1;
                    }

                    if (ch == '}') {
                        count -= 1;

                        if (count == 0) {
                            body_length = (i - body_start);

                            length = (i - index) + 1;

                            break;
                        }
                    }
                }

                var declaration = new appex.templates.SectionDeclaration(this.content, name, start, length, body_start, body_length);

                this.declarations.push(declaration);

                return index + declaration.length;
            };

            Scanner.prototype.scan_layout = function (index) {
                var filename = '';

                var start = index;

                var length = 0;

                var cursor = (index + 7);

                cursor = this.advance(cursor);

                var quote_flag = 0;

                var code = this.content.charCodeAt(cursor);

                if (code == 39 || code == 34) {
                    quote_flag = code;
                } else {
                    return (index);
                }

                cursor += 1;

                for (var i = cursor; i < this.max(); i++) {
                    var code = this.content.charCodeAt(i);

                    if (code == 10 || code == 13) {
                        return index;
                    }

                    if (code == quote_flag) {
                        filename = this.read(cursor, i - cursor);

                        length = (i - index) + 1;

                        break;
                    }
                }

                var declaration = new appex.templates.LayoutDeclaration(filename, start, length);

                this.declarations.push(declaration);

                return index + declaration.length;
            };

            Scanner.prototype.scan_render = function (index) {
                var filename = '';
                var start = index;
                var length = 0;
                var cursor = (index + 7);

                cursor = this.advance(cursor);

                var quote_flag = 0;

                var code = this.content.charCodeAt(cursor);

                if (code == 39 || code == 34) {
                    quote_flag = code;
                } else {
                    return (index);
                }

                cursor += 1;

                for (var i = cursor; i < this.max(); i++) {
                    var code = this.content.charCodeAt(i);

                    if (code == 10 || code == 13) {
                        return index;
                    }

                    if (code == quote_flag) {
                        filename = this.read(cursor, i - cursor);

                        length = (i - index) + 1;

                        break;
                    }
                }

                var declaration = new appex.templates.RenderDeclaration(filename, start, length);

                this.declarations.push(declaration);

                return index + declaration.length;
            };

            Scanner.prototype.scan_for = function (index) {
                var expression = '';
                var start = index;
                var length = 0;
                var body_start = 0;
                var body_length = 0;

                var cursor = index + 4;

                cursor = this.advance(cursor);

                if (this.content.charCodeAt(cursor) != 40) {
                    return index;
                }

                for (var i = cursor; i < this.max(); i++) {
                    var code = this.content.charCodeAt(i);

                    if (code == 10 || code == 13) {
                        return index;
                    }

                    if (code == 41) {
                        expression = this.read(cursor, (i - cursor) + 1);

                        cursor = (i + 1);

                        break;
                    }
                }

                cursor = this.advance(cursor);

                if (this.content.charCodeAt(cursor) != 123) {
                    return index;
                }

                var count = 0;

                for (var i = cursor; i < this.max(); i++) {
                    var ch = this.content.charAt(i);

                    if (ch == '{') {
                        if (count == 0) {
                            body_start = (i + 1);
                        }

                        count += 1;
                    }

                    if (ch == '}') {
                        count -= 1;

                        if (count == 0) {
                            body_length = (i - body_start);

                            length = (i - index) + 1;

                            break;
                        }
                    }
                }

                var declaration = new appex.templates.ForDeclaration(this.content, expression, start, length, body_start, body_length);

                this.declarations.push(declaration);

                return index + declaration.length;
            };

            Scanner.prototype.scan_if = function (index) {
                var expression = '';
                var start = index;
                var length = 0;
                var body_start = 0;
                var body_length = 0;
                var cursor = index + 3;

                cursor = this.advance(cursor);

                if (this.content.charCodeAt(cursor) != 40) {
                    return index;
                }

                for (var i = cursor; i < this.max(); i++) {
                    var code = this.content.charCodeAt(i);

                    if (code == 10 || code == 13) {
                        return index;
                    }

                    if (code == 41) {
                        expression = this.read(cursor, (i - cursor) + 1);

                        cursor = (i + 1);

                        break;
                    }
                }

                cursor = this.advance(cursor);

                if (this.content.charCodeAt(cursor) != 123) {
                    return index;
                }

                var count = 0;

                for (var i = cursor; i < this.max(); i++) {
                    var ch = this.content.charAt(i);

                    if (ch == '{') {
                        if (count == 0) {
                            body_start = (i + 1);
                        }

                        count += 1;
                    }

                    if (ch == '}') {
                        count -= 1;

                        if (count == 0) {
                            body_length = (i - body_start);

                            length = (i - index) + 1;

                            break;
                        }
                    }
                }

                var declaration = new appex.templates.IfDeclaration(this.content, expression, start, length, body_start, body_length);

                this.declarations.push(declaration);

                return index + declaration.length;
            };

            Scanner.prototype.scan_code = function (index) {
                var start = index;

                var length = 0;

                var body_start = index + 2;

                var body_length = 0;

                var cursor = index + 1;

                var count = 0;

                for (var i = cursor; i < this.max(); i++) {
                    var ch = this.content.charAt(i);

                    if (ch == '{') {
                        count += 1;
                    }

                    if (ch == '}') {
                        count -= 1;

                        if (count == 0) {
                            body_length = (i - body_start);

                            length = (i - index) + 1;

                            break;
                        }
                    }
                }

                var declaration = new appex.templates.CodeDeclaration(this.content, start, length, body_start, body_length);

                this.declarations.push(declaration);

                return index + declaration.length;
            };

            Scanner.prototype.scan_expression = function (index) {
                var expression = '';
                var start = index;
                var length = 0;
                var cursor = (index + 1);

                cursor = this.advance(cursor);

                var code = this.content.charCodeAt(cursor);

                if (code != 40) {
                    return index;
                }

                for (var i = cursor; i < this.max(); i++) {
                    var code = this.content.charCodeAt(i);

                    if (code == 10 || code == 13) {
                        return index;
                    }

                    if (code == 41) {
                        expression = this.read(cursor, (i - cursor) + 1);

                        length = (i - index) + 1;

                        break;
                    }
                }

                var declaration = new appex.templates.ExpressionDeclaration(this.content, expression, start, length);

                this.declarations.push(declaration);

                return index + declaration.length;
            };

            Scanner.prototype.scan_comment = function (index) {
                var comment = '';

                var start = index;

                var length = 0;

                var cursor = index + 2;

                for (var i = cursor; i < this.max(); i++) {
                    var code = this.content.charCodeAt(i);

                    if (code == 42) {
                        if (this.content.charCodeAt(i + 1) == 64) {
                            i = i + 1;

                            comment = this.read(index, (i - cursor) + 2);

                            length = (i - index) + 1;

                            break;
                        }
                    }
                }

                var declaration = new appex.templates.CommentDeclaration(this.content, comment, start, length);

                this.declarations.push(declaration);

                return index + declaration.length;
            };

            Scanner.prototype.scan_content = function (index) {
                var cursor = this.advanceto(index + 1, 64);

                var declaration = new appex.templates.ContentDeclaration(index, cursor - index);

                if (declaration.length > 0) {
                    this.declarations.push(declaration);
                }

                return (index + declaration.length);
            };

            Scanner.prototype.scan = function () {
                var index = this.declaration.body_start;

                do {
                    if (this.content.substr(index, 8) === '@section') {
                        var next = this.scan_section(index);

                        if (next > index) {
                            index = next;

                            continue;
                        }
                    }

                    if (this.content.substr(index, 7) === '@layout') {
                        var next = this.scan_layout(index);

                        if (next > index) {
                            index = next;

                            continue;
                        }
                    }

                    if (this.content.substr(index, 7) === '@render') {
                        var next = this.scan_render(index);

                        if (next > index) {
                            index = next;

                            continue;
                        }
                    }

                    if (this.content.substr(index, 4) === '@for') {
                        var next = this.scan_for(index);

                        if (next > index) {
                            index = next;

                            continue;
                        }
                    }

                    if (this.content.substr(index, 3) === '@if') {
                        var next = this.scan_if(index);

                        if (next > index) {
                            index = next;

                            continue;
                        }
                    }

                    if (this.content.substr(index, 2) === '@{') {
                        var next = this.scan_code(index);

                        if (next > index) {
                            index = next;

                            continue;
                        }
                    }

                    if (this.content.substr(index, 2) === '@(') {
                        var next = this.scan_expression(index);

                        if (next > index) {
                            index = next;

                            continue;
                        }
                    }

                    if (this.content.substr(index, 2) === '@*') {
                        var next = this.scan_comment(index);

                        if (next > index) {
                            index = next;

                            continue;
                        }
                    }

                    index = this.scan_content(index);
                } while(index < this.max());
            };
            return Scanner;
        })();
        templates.Scanner = Scanner;
    })(appex.templates || (appex.templates = {}));
    var templates = appex.templates;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (templates) {
        (function (io) {
            var Buffer = (function () {
                function Buffer() {
                }
                Buffer.process = function (buffer) {
                    switch (buffer[0]) {
                        case 0xFE:
                            if (buffer[1] == 0xFF) {
                                var i = 0;

                                while ((i + 1) < buffer.length) {
                                    var temp = buffer[i];

                                    buffer[i] = buffer[i + 1];

                                    buffer[i + 1] = temp;

                                    i += 2;
                                }

                                return buffer.toString("ucs2", 2);
                            }

                            break;
                        case 0xFF:
                            if (buffer[1] == 0xFE) {
                                return buffer.toString("ucs2", 2);
                            }

                            break;

                        case 0xEF:
                            if (buffer[1] == 0xBB) {
                                return buffer.toString("utf8", 3);
                            }
                    }

                    return buffer.toString();
                };
                return Buffer;
            })();
            io.Buffer = Buffer;
        })(templates.io || (templates.io = {}));
        var io = templates.io;
    })(appex.templates || (appex.templates = {}));
    var templates = appex.templates;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (templates) {
        (function (io) {
            var IOSync = (function () {
                function IOSync() {
                }
                IOSync.prototype.load = function (filename) {
                    filename = appex.templates.util.Path.toForwardSlashes(filename);

                    try  {
                        var content = node.fs.readFileSync(filename);

                        return appex.templates.io.Buffer.process(content);
                    } catch (e) {
                        return e.toString();
                    }
                };
                return IOSync;
            })();
            io.IOSync = IOSync;
        })(templates.io || (templates.io = {}));
        var io = templates.io;
    })(appex.templates || (appex.templates = {}));
    var templates = appex.templates;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (templates) {
        (function (util) {
            var Path = (function () {
                function Path() {
                }
                Path.isAbsoluteUrl = function (path) {
                    var regex = new RegExp("^(http[s]?:\\/\\/(www\\.)?|ftp[s]?:\\/\\/(www\\.)?|www\\.){1}([0-9A-Za-z-\\.@:%_\+~#=]+)+((\\.[a-zA-Z]{2,3})+)(/(.)*)?(\\?(.)*)?");

                    return regex.test(path);
                };

                Path.isAbsoluteUrn = function (path) {
                    var regex = new RegExp("^(?:[a-xA-Z]:(/|\))|(?:file://)");

                    return regex.test(path);
                };

                Path.isRootRelative = function (path) {
                    return path.indexOf('/') == 0 && path.indexOf('//') != 0;
                };

                Path.isAbsolute = function (path) {
                    if (!appex.templates.util.Path.isAbsoluteUrl(path)) {
                        if (!appex.templates.util.Path.isAbsoluteUrn(path)) {
                            return false;
                        }
                    }

                    return true;
                };

                Path.isRelative = function (path) {
                    if (!Path.isAbsoluteUrl(path)) {
                        if (!Path.isAbsoluteUrn(path)) {
                            if (!(path.indexOf('/') == 0)) {
                                return true;
                            }
                        }
                    }
                    return false;
                };

                Path.toForwardSlashes = function (path) {
                    return path.replace(/\\/gi, "/");
                };

                Path.relativeToAbsolute = function (absolute_parent_path, relative_path) {
                    if (Path.isRelative(relative_path)) {
                        var absolute_parent_directory = node.path.dirname(absolute_parent_path);

                        return node.path.join(absolute_parent_directory, relative_path);
                    }

                    return relative_path;
                };

                Path.makeAbsolute = function (path) {
                    if (!appex.templates.util.Path.isAbsolute(path)) {
                        return node.path.resolve('./', path);
                    }

                    return path;
                };
                return Path;
            })();
            util.Path = Path;
        })(templates.util || (templates.util = {}));
        var util = templates.util;
    })(appex.templates || (appex.templates = {}));
    var templates = appex.templates;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (templates) {
        var Parser = (function () {
            function Parser(filename) {
                this.filename = filename;
                this.output = [];

                this.io = new appex.templates.io.IOSync();

                var filename = appex.templates.util.Path.makeAbsolute(filename);

                var content = this.io.load(filename);

                this.document = new appex.templates.Document(filename, content);

                for (var n in this.document.declarations) {
                    if (this.document.declarations[n].type == 'layout') {
                        var layout_declaration = this.document.declarations[n];

                        filename = appex.templates.util.Path.relativeToAbsolute(this.document.filename, layout_declaration.filename);

                        var content = this.io.load(filename);

                        this.reference_document = this.document;

                        this.document = new appex.templates.Document(filename, content);

                        return;
                    }
                }
            }
            Parser.prototype.parse = function () {
                this.write('var template = function() {');

                this.write('    this.buffer = []');

                this.write('    this.write = function(data) {');

                this.write('        this.buffer.push(data.toString())');

                this.write('     }');

                this.write('    this.render = function(context) {');

                this.write('        this.buffer = []');

                this.emit(this.document, this.document);

                this.write('        return this.buffer.join(\'\')');

                this.write('     }');

                this.write('}');

                return this.output.join('');
            };

            Parser.prototype.emit = function (current_document, declaration) {
                switch (declaration.type) {
                    case 'layout':
                        break;

                    case 'render':
                        var render_declaration = declaration;

                        var filename = appex.templates.util.Path.relativeToAbsolute(current_document.filename, render_declaration.filename);

                        var content = this.io.load(filename);

                        var document = new appex.templates.Document(filename, content);

                        this.emit(document, document);

                        return;

                        break;

                    case 'section':
                        var section_declaration = declaration;

                        if (this.reference_document) {
                            for (var n in this.reference_document.declarations) {
                                if (this.reference_document.declarations[n].type == 'section') {
                                    var reference_section_declaration = this.reference_document.declarations[n];

                                    if (reference_section_declaration.name == section_declaration.name) {
                                        for (var m in reference_section_declaration.declarations) {
                                            this.emit(this.reference_document, reference_section_declaration.declarations[m]);
                                        }

                                        return;
                                    }
                                }
                            }
                        }

                        break;

                    case 'for':
                        var for_declaration = declaration;

                        this.write('        ' + for_declaration.type + for_declaration.expression + '{');

                        break;

                    case 'if':
                        var if_declaration = declaration;

                        this.write('       ' + if_declaration.type + if_declaration.expression + '{');

                        break;

                    case 'expression':
                        var expression_declaration = declaration;

                        this.write('        this.write' + expression_declaration.expression);

                        break;

                    case 'code':
                        this.write('      ' + this.read(current_document, declaration.body_start, declaration.body_length));

                        break;

                    case 'content':
                        this.write_literal(this.read(current_document, declaration.start, declaration.length));

                        break;
                }

                for (var n in declaration.declarations) {
                    this.emit(current_document, declaration.declarations[n]);
                }

                switch (declaration.type) {
                    case 'for':

                    case 'if':
                        this.write('        }');

                        break;
                }
            };

            Parser.prototype.read = function (document, start, length) {
                return document.content.substr(start, length);
            };

            Parser.prototype.write = function (content) {
                this.output.push(content + '\n');
            };

            Parser.prototype.write_literal = function (content) {
                content = content.replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/'/g, '\\\'');

                this.write('        this.write(\'' + content + '\')');
            };
            return Parser;
        })();
        templates.Parser = Parser;
    })(appex.templates || (appex.templates = {}));
    var templates = appex.templates;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (templates) {
        var Engine = (function () {
            function Engine(options) {
                this.options = options;
                if (!options) {
                    options = { devmode: false };
                }

                if (!options.devmode) {
                    options.devmode = false;
                }

                this.cache = [];
            }
            Engine.prototype.render = function (filename, context) {
                if (this.options.devmode == false) {
                    if (this.cache[filename]) {
                        var template = this.cache[filename];

                        var result = template.render(context || {});

                        return result;
                    }
                }

                var parser = new appex.templates.Parser(filename);

                var code = parser.parse();

                try  {
                    var script = node.vm.createScript(code + ' exports = new template()', filename);

                    var sandbox = { exports: {} };

                    script.runInNewContext(sandbox);

                    var template = sandbox.exports;

                    var result = template.render(context || {});

                    this.cache[filename] = template;

                    return result;
                } catch (e) {
                    return e.toString();
                }
            };
            return Engine;
        })();
        templates.Engine = Engine;
    })(appex.templates || (appex.templates = {}));
    var templates = appex.templates;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (web) {
        (function (media) {
            var Mime = (function () {
                function Mime() {
                }
                Mime.prototype.lookup = function (filename) {
                    var idx = filename.lastIndexOf('.');

                    if (idx != -1) {
                        var extension = filename.substring(idx);

                        extension = extension.indexOf(".") != -1 ? extension.replace(".", '') : extension;

                        switch (extension) {
                            case "123":
                                return "application/vnd.lotus-1-2-3";
                            case "3dml":
                                return "text/vnd.in3d.3dml";
                            case "3ds":
                                return "image/x-3ds";
                            case "3g2":
                                return "video/3gpp2";
                            case "3gp":
                                return "video/3gpp";
                            case "7z":
                                return "application/x-7z-compressed";
                            case "aab":
                                return "application/x-authorware-bin";
                            case "aac":
                                return "audio/x-aac";
                            case "aam":
                                return "application/x-authorware-map";
                            case "aas":
                                return "application/x-authorware-seg";
                            case "abw":
                                return "application/x-abiword";
                            case "ac":
                                return "application/pkix-attr-cert";
                            case "acc":
                                return "application/vnd.americandynamics.acc";
                            case "ace":
                                return "application/x-ace-compressed";
                            case "acu":
                                return "application/vnd.acucobol";
                            case "acutc":
                                return "application/vnd.acucorp";
                            case "adp":
                                return "audio/adpcm";
                            case "aep":
                                return "application/vnd.audiograph";
                            case "afm":
                                return "application/x-font-type1";
                            case "afp":
                                return "application/vnd.ibm.modcap";
                            case "ahead":
                                return "application/vnd.ahead.space";
                            case "ai":
                                return "application/postscript";
                            case "aif":
                                return "audio/x-aiff";
                            case "aifc":
                                return "audio/x-aiff";
                            case "aiff":
                                return "audio/x-aiff";
                            case "air":
                                return "application/vnd.adobe.air-application-installer-package+zip";
                            case "ait":
                                return "application/vnd.dvb.ait";
                            case "ami":
                                return "application/vnd.amiga.ami";
                            case "apk":
                                return "application/vnd.android.package-archive";
                            case "appcache":
                                return "text/cache-manifest";
                            case "application":
                                return "application/x-ms-application";
                            case "apr":
                                return "application/vnd.lotus-approach";
                            case "arc":
                                return "application/x-freearc";
                            case "asax":
                                return "text/csharp";
                            case "asc":
                                return "application/pgp-signature";
                            case "asf":
                                return "video/x-ms-asf";
                            case "asm":
                                return "text/x-asm";
                            case "aso":
                                return "application/vnd.accpac.simply.aso";
                            case "asx":
                                return "video/x-ms-asf";
                            case "atc":
                                return "application/vnd.acucorp";
                            case "atom":
                                return "application/atom+xml";
                            case "atomcat":
                                return "application/atomcat+xml";
                            case "atomsvc":
                                return "application/atomsvc+xml";
                            case "atx":
                                return "application/vnd.antix.game-component";
                            case "au":
                                return "audio/basic";
                            case "avi":
                                return "video/x-msvideo";
                            case "aw":
                                return "application/applixware";
                            case "azf":
                                return "application/vnd.airzip.filesecure.azf";
                            case "azs":
                                return "application/vnd.airzip.filesecure.azs";
                            case "azw":
                                return "application/vnd.amazon.ebook";
                            case "bat":
                                return "application/x-msdownload";
                            case "bcpio":
                                return "application/x-bcpio";
                            case "bdf":
                                return "application/x-font-bdf";
                            case "bdm":
                                return "application/vnd.syncml.dm+wbxml";
                            case "bed":
                                return "application/vnd.realvnc.bed";
                            case "bh2":
                                return "application/vnd.fujitsu.oasysprs";
                            case "bin":
                                return "application/octet-stream";
                            case "blb":
                                return "application/x-blorb";
                            case "blorb":
                                return "application/x-blorb";
                            case "bmi":
                                return "application/vnd.bmi";
                            case "bmp":
                                return "image/bmp";
                            case "book":
                                return "application/vnd.framemaker";
                            case "box":
                                return "application/vnd.previewsystems.box";
                            case "boz":
                                return "application/x-bzip2";
                            case "bpk":
                                return "application/octet-stream";
                            case "btif":
                                return "image/prs.btif";
                            case "bz":
                                return "application/x-bzip";
                            case "bz2":
                                return "application/x-bzip2";
                            case "c":
                                return "text/x-c";
                            case "c11amc":
                                return "application/vnd.cluetrust.cartomobile-config";
                            case "c11amz":
                                return "application/vnd.cluetrust.cartomobile-config-pkg";
                            case "c4d":
                                return "application/vnd.clonk.c4group";
                            case "c4f":
                                return "application/vnd.clonk.c4group";
                            case "c4g":
                                return "application/vnd.clonk.c4group";
                            case "c4p":
                                return "application/vnd.clonk.c4group";
                            case "c4u":
                                return "application/vnd.clonk.c4group";
                            case "cab":
                                return "application/vnd.ms-cab-compressed";
                            case "caf":
                                return "audio/x-caf";
                            case "cap":
                                return "application/vnd.tcpdump.pcap";
                            case "car":
                                return "application/vnd.curl.car";
                            case "cat":
                                return "application/vnd.ms-pki.seccat";
                            case "cb7":
                                return "application/x-cbr";
                            case "cba":
                                return "application/x-cbr";
                            case "cbr":
                                return "application/x-cbr";
                            case "cbt":
                                return "application/x-cbr";
                            case "cbz":
                                return "application/x-cbr";
                            case "cc":
                                return "text/x-c";
                            case "cct":
                                return "application/x-director";
                            case "ccxml":
                                return "application/ccxml+xml";
                            case "cdbcmsg":
                                return "application/vnd.contact.cmsg";
                            case "cdf":
                                return "application/x-netcdf";
                            case "cdkey":
                                return "application/vnd.mediastation.cdkey";
                            case "cdmia":
                                return "application/cdmi-capability";
                            case "cdmic":
                                return "application/cdmi-container";
                            case "cdmid":
                                return "application/cdmi-domain";
                            case "cdmio":
                                return "application/cdmi-object";
                            case "cdmiq":
                                return "application/cdmi-queue";
                            case "cdx":
                                return "chemical/x-cdx";
                            case "cdxml":
                                return "application/vnd.chemdraw+xml";
                            case "cdy":
                                return "application/vnd.cinderella";
                            case "cer":
                                return "application/pkix-cert";
                            case "cfs":
                                return "application/x-cfs-compressed";
                            case "cgm":
                                return "image/cgm";
                            case "chat":
                                return "application/x-chat";
                            case "chm":
                                return "application/vnd.ms-htmlhelp";
                            case "chrt":
                                return "application/vnd.kde.kchart";
                            case "cif":
                                return "chemical/x-cif";
                            case "cii":
                                return "application/vnd.anser-web-certificate-issue-initiation";
                            case "cil":
                                return "application/vnd.ms-artgalry";
                            case "cla":
                                return "application/vnd.claymore";
                            case "class":
                                return "application/java-vm";
                            case "clkk":
                                return "application/vnd.crick.clicker.keyboard";
                            case "clkp":
                                return "application/vnd.crick.clicker.palette";
                            case "clkt":
                                return "application/vnd.crick.clicker.template";
                            case "clkw":
                                return "application/vnd.crick.clicker.wordbank";
                            case "clkx":
                                return "application/vnd.crick.clicker";
                            case "clp":
                                return "application/x-msclip";
                            case "cmc":
                                return "application/vnd.cosmocaller";
                            case "cmdf":
                                return "chemical/x-cmdf";
                            case "cml":
                                return "chemical/x-cml";
                            case "cmp":
                                return "application/vnd.yellowriver-custom-menu";
                            case "cmx":
                                return "image/x-cmx";
                            case "cod":
                                return "application/vnd.rim.cod";
                            case "config":
                                return "text/xml";
                            case "com":
                                return "application/x-msdownload";
                            case "conf":
                                return "text/plain";
                            case "cpio":
                                return "application/x-cpio";
                            case "cpp":
                                return "text/x-c";
                            case "cpt":
                                return "application/mac-compactpro";
                            case "crd":
                                return "application/x-mscardfile";
                            case "crl":
                                return "application/pkix-crl";
                            case "crt":
                                return "application/x-x509-ca-cert";
                            case "cryptonote":
                                return "application/vnd.rig.cryptonote";
                            case "csh":
                                return "application/x-csh";
                            case "csml":
                                return "chemical/x-csml";
                            case "csp":
                                return "application/vnd.commonspace";
                            case "cs":
                                return "text/csharp";
                            case "css":
                                return "text/css";
                            case "cst":
                                return "application/x-director";
                            case "csv":
                                return "text/csv";
                            case "cu":
                                return "application/cu-seeme";
                            case "curl":
                                return "text/vnd.curl";
                            case "cww":
                                return "application/prs.cww";
                            case "cxt":
                                return "application/x-director";
                            case "cxx":
                                return "text/x-c";
                            case "dae":
                                return "model/vnd.collada+xml";
                            case "daf":
                                return "application/vnd.mobius.daf";
                            case "dart":
                                return "application/vnd.dart";
                            case "dataless":
                                return "application/vnd.fdsn.seed";
                            case "davmount":
                                return "application/davmount+xml";
                            case "dbk":
                                return "application/docbook+xml";
                            case "dcr":
                                return "application/x-director";
                            case "dcurl":
                                return "text/vnd.curl.dcurl";
                            case "dd2":
                                return "application/vnd.oma.dd2+xml";
                            case "ddd":
                                return "application/vnd.fujixerox.ddd";
                            case "deb":
                                return "application/x-debian-package";
                            case "def":
                                return "text/plain";
                            case "deploy":
                                return "application/octet-stream";
                            case "der":
                                return "application/x-x509-ca-cert";
                            case "dfac":
                                return "application/vnd.dreamfactory";
                            case "dgc":
                                return "application/x-dgc-compressed";
                            case "dic":
                                return "text/x-c";
                            case "dir":
                                return "application/x-director";
                            case "dis":
                                return "application/vnd.mobius.dis";
                            case "dist":
                                return "application/octet-stream";
                            case "distz":
                                return "application/octet-stream";
                            case "djv":
                                return "image/vnd.djvu";
                            case "djvu":
                                return "image/vnd.djvu";
                            case "dll":
                                return "application/x-msdownload";
                            case "dmg":
                                return "application/x-apple-diskimage";
                            case "dmp":
                                return "application/vnd.tcpdump.pcap";
                            case "dms":
                                return "application/octet-stream";
                            case "dna":
                                return "application/vnd.dna";
                            case "doc":
                                return "application/msword";
                            case "docm":
                                return "application/vnd.ms-word.document.macroenabled.12";
                            case "docx":
                                return "application/vnd.openxmlformats-officedocument.wordprocessingml.document";
                            case "dot":
                                return "application/msword";
                            case "dotm":
                                return "application/vnd.ms-word.template.macroenabled.12";
                            case "dotx":
                                return "application/vnd.openxmlformats-officedocument.wordprocessingml.template";
                            case "dp":
                                return "application/vnd.osgi.dp";
                            case "dpg":
                                return "application/vnd.dpgraph";
                            case "dra":
                                return "audio/vnd.dra";
                            case "dsc":
                                return "text/prs.lines.tag";
                            case "dssc":
                                return "application/dssc+der";
                            case "dtb":
                                return "application/x-dtbook+xml";
                            case "dtd":
                                return "application/xml-dtd";
                            case "dts":
                                return "audio/vnd.dts";
                            case "dtshd":
                                return "audio/vnd.dts.hd";
                            case "dump":
                                return "application/octet-stream";
                            case "dvb":
                                return "video/vnd.dvb.file";
                            case "dvi":
                                return "application/x-dvi";
                            case "dwf":
                                return "model/vnd.dwf";
                            case "dwg":
                                return "image/vnd.dwg";
                            case "dxf":
                                return "image/vnd.dxf";
                            case "dxp":
                                return "application/vnd.spotfire.dxp";
                            case "dxr":
                                return "application/x-director";
                            case "ecelp4800":
                                return "audio/vnd.nuera.ecelp4800";
                            case "ecelp7470":
                                return "audio/vnd.nuera.ecelp7470";
                            case "ecelp9600":
                                return "audio/vnd.nuera.ecelp9600";
                            case "ecma":
                                return "application/ecmascript";
                            case "edm":
                                return "application/vnd.novadigm.edm";
                            case "edx":
                                return "application/vnd.novadigm.edx";
                            case "efif":
                                return "application/vnd.picsel";
                            case "ei6":
                                return "application/vnd.pg.osasli";
                            case "elc":
                                return "application/octet-stream";
                            case "emf":
                                return "application/x-msmetafile";
                            case "eml":
                                return "message/rfc822";
                            case "emma":
                                return "application/emma+xml";
                            case "emz":
                                return "application/x-msmetafile";
                            case "eol":
                                return "audio/vnd.digital-winds";
                            case "eot":
                                return "application/vnd.ms-fontobject";
                            case "eps":
                                return "application/postscript";
                            case "epub":
                                return "application/epub+zip";
                            case "es3":
                                return "application/vnd.eszigno3+xml";
                            case "esa":
                                return "application/vnd.osgi.subsystem";
                            case "esf":
                                return "application/vnd.epson.esf";
                            case "et3":
                                return "application/vnd.eszigno3+xml";
                            case "etx":
                                return "text/x-setext";
                            case "eva":
                                return "application/x-eva";
                            case "evy":
                                return "application/x-envoy";
                            case "exe":
                                return "application/x-msdownload";
                            case "exi":
                                return "application/exi";
                            case "ext":
                                return "application/vnd.novadigm.ext";
                            case "ez":
                                return "application/andrew-inset";
                            case "ez2":
                                return "application/vnd.ezpix-album";
                            case "ez3":
                                return "application/vnd.ezpix-package";
                            case "f":
                                return "text/x-fortran";
                            case "f4v":
                                return "video/x-f4v";
                            case "f77":
                                return "text/x-fortran";
                            case "f90":
                                return "text/x-fortran";
                            case "fbs":
                                return "image/vnd.fastbidsheet";
                            case "fcdt":
                                return "application/vnd.adobe.formscentral.fcdt";
                            case "fcs":
                                return "application/vnd.isac.fcs";
                            case "fdf":
                                return "application/vnd.fdf";
                            case "fe_launch":
                                return "application/vnd.denovo.fcselayout-link";
                            case "fg5":
                                return "application/vnd.fujitsu.oasysgp";
                            case "fgd":
                                return "application/x-director";
                            case "fh":
                                return "image/x-freehand";
                            case "fh4":
                                return "image/x-freehand";
                            case "fh5":
                                return "image/x-freehand";
                            case "fh7":
                                return "image/x-freehand";
                            case "fhc":
                                return "image/x-freehand";
                            case "fig":
                                return "application/x-xfig";
                            case "flac":
                                return "audio/x-flac";
                            case "fli":
                                return "video/x-fli";
                            case "flo":
                                return "application/vnd.micrografx.flo";
                            case "flv":
                                return "video/x-flv";
                            case "flw":
                                return "application/vnd.kde.kivio";
                            case "flx":
                                return "text/vnd.fmi.flexstor";
                            case "fly":
                                return "text/vnd.fly";
                            case "fm":
                                return "application/vnd.framemaker";
                            case "fnc":
                                return "application/vnd.frogans.fnc";
                            case "for":
                                return "text/x-fortran";
                            case "fpx":
                                return "image/vnd.fpx";
                            case "frame":
                                return "application/vnd.framemaker";
                            case "fsc":
                                return "application/vnd.fsc.weblaunch";
                            case "fst":
                                return "image/vnd.fst";
                            case "ftc":
                                return "application/vnd.fluxtime.clip";
                            case "fti":
                                return "application/vnd.anser-web-funds-transfer-initiation";
                            case "fvt":
                                return "video/vnd.fvt";
                            case "fxp":
                                return "application/vnd.adobe.fxp";
                            case "fxpl":
                                return "application/vnd.adobe.fxp";
                            case "fzs":
                                return "application/vnd.fuzzysheet";
                            case "g2w":
                                return "application/vnd.geoplan";
                            case "g3":
                                return "image/g3fax";
                            case "g3w":
                                return "application/vnd.geospace";
                            case "gac":
                                return "application/vnd.groove-account";
                            case "gam":
                                return "application/x-tads";
                            case "gbr":
                                return "application/rpki-ghostbusters";
                            case "gca":
                                return "application/x-gca-compressed";
                            case "gdl":
                                return "model/vnd.gdl";
                            case "geo":
                                return "application/vnd.dynageo";
                            case "gex":
                                return "application/vnd.geometry-explorer";
                            case "ggb":
                                return "application/vnd.geogebra.file";
                            case "ggt":
                                return "application/vnd.geogebra.tool";
                            case "ghf":
                                return "application/vnd.groove-help";
                            case "gif":
                                return "image/gif";
                            case "gim":
                                return "application/vnd.groove-identity-message";
                            case "gml":
                                return "application/gml+xml";
                            case "gmx":
                                return "application/vnd.gmx";
                            case "gnumeric":
                                return "application/x-gnumeric";
                            case "gph":
                                return "application/vnd.flographit";
                            case "gpx":
                                return "application/gpx+xml";
                            case "gqf":
                                return "application/vnd.grafeq";
                            case "gqs":
                                return "application/vnd.grafeq";
                            case "gram":
                                return "application/srgs";
                            case "gramps":
                                return "application/x-gramps-xml";
                            case "gre":
                                return "application/vnd.geometry-explorer";
                            case "grv":
                                return "application/vnd.groove-injector";
                            case "grxml":
                                return "application/srgs+xml";
                            case "gsf":
                                return "application/x-font-ghostscript";
                            case "gtar":
                                return "application/x-gtar";
                            case "gtm":
                                return "application/vnd.groove-tool-message";
                            case "gtw":
                                return "model/vnd.gtw";
                            case "gv":
                                return "text/vnd.graphviz";
                            case "gxf":
                                return "application/gxf";
                            case "gxt":
                                return "application/vnd.geonext";
                            case "h":
                                return "text/x-c";
                            case "h261":
                                return "video/h261";
                            case "h263":
                                return "video/h263";
                            case "h264":
                                return "video/h264";
                            case "hal":
                                return "application/vnd.hal+xml";
                            case "hbci":
                                return "application/vnd.hbci";
                            case "hdf":
                                return "application/x-hdf";
                            case "hh":
                                return "text/x-c";
                            case "hlp":
                                return "application/winhlp";
                            case "hpgl":
                                return "application/vnd.hp-hpgl";
                            case "hpid":
                                return "application/vnd.hp-hpid";
                            case "hps":
                                return "application/vnd.hp-hps";
                            case "hqx":
                                return "application/mac-binhex40";
                            case "htke":
                                return "application/vnd.kenameaapp";
                            case "htm":
                                return "text/html";
                            case "html":
                                return "text/html";
                            case "cshtml":
                                return "text/html";
                            case "hvd":
                                return "application/vnd.yamaha.hv-dic";
                            case "hvp":
                                return "application/vnd.yamaha.hv-voice";
                            case "hvs":
                                return "application/vnd.yamaha.hv-script";
                            case "i2g":
                                return "application/vnd.intergeo";
                            case "icc":
                                return "application/vnd.iccprofile";
                            case "ice":
                                return "x-conference/x-cooltalk";
                            case "icm":
                                return "application/vnd.iccprofile";
                            case "ico":
                                return "image/x-icon";
                            case "ics":
                                return "text/calendar";
                            case "ief":
                                return "image/ief";
                            case "ifb":
                                return "text/calendar";
                            case "ifm":
                                return "application/vnd.shana.informed.formdata";
                            case "iges":
                                return "model/iges";
                            case "igl":
                                return "application/vnd.igloader";
                            case "igm":
                                return "application/vnd.insors.igm";
                            case "igs":
                                return "model/iges";
                            case "igx":
                                return "application/vnd.micrografx.igx";
                            case "iif":
                                return "application/vnd.shana.informed.interchange";
                            case "imp":
                                return "application/vnd.accpac.simply.imp";
                            case "ims":
                                return "application/vnd.ms-ims";
                            case "in":
                                return "text/plain";
                            case "ink":
                                return "application/inkml+xml";
                            case "inkml":
                                return "application/inkml+xml";
                            case "install":
                                return "application/x-install-instructions";
                            case "iota":
                                return "application/vnd.astraea-software.iota";
                            case "ipfix":
                                return "application/ipfix";
                            case "ipk":
                                return "application/vnd.shana.informed.package";
                            case "irm":
                                return "application/vnd.ibm.rights-management";
                            case "irp":
                                return "application/vnd.irepository.package+xml";
                            case "iso":
                                return "application/x-iso9660-image";
                            case "itp":
                                return "application/vnd.shana.informed.formtemplate";
                            case "ivp":
                                return "application/vnd.immervision-ivp";
                            case "ivu":
                                return "application/vnd.immervision-ivu";
                            case "jad":
                                return "text/vnd.sun.j2me.app-descriptor";
                            case "jam":
                                return "application/vnd.jam";
                            case "jar":
                                return "application/java-archive";
                            case "java":
                                return "text/x-java-source";
                            case "jisp":
                                return "application/vnd.jisp";
                            case "jlt":
                                return "application/vnd.hp-jlyt";
                            case "jnlp":
                                return "application/x-java-jnlp-file";
                            case "joda":
                                return "application/vnd.joost.joda-archive";
                            case "jpe":
                                return "image/jpeg";
                            case "jpeg":
                                return "image/jpeg";
                            case "jpg":
                                return "image/jpeg";
                            case "jpgm":
                                return "video/jpm";
                            case "jpgv":
                                return "video/jpeg";
                            case "jpm":
                                return "video/jpm";
                            case "js":
                                return "application/javascript";
                            case "json":
                                return "application/json";
                            case "jsonml":
                                return "application/jsonml+json";
                            case "kar":
                                return "audio/midi";
                            case "karbon":
                                return "application/vnd.kde.karbon";
                            case "kfo":
                                return "application/vnd.kde.kformula";
                            case "kia":
                                return "application/vnd.kidspiration";
                            case "kml":
                                return "application/vnd.google-earth.kml+xml";
                            case "kmz":
                                return "application/vnd.google-earth.kmz";
                            case "kne":
                                return "application/vnd.kinar";
                            case "knp":
                                return "application/vnd.kinar";
                            case "kon":
                                return "application/vnd.kde.kontour";
                            case "kpr":
                                return "application/vnd.kde.kpresenter";
                            case "kpt":
                                return "application/vnd.kde.kpresenter";
                            case "kpxx":
                                return "application/vnd.ds-keypoint";
                            case "ksp":
                                return "application/vnd.kde.kspread";
                            case "ktr":
                                return "application/vnd.kahootz";
                            case "ktx":
                                return "image/ktx";
                            case "ktz":
                                return "application/vnd.kahootz";
                            case "kwd":
                                return "application/vnd.kde.kword";
                            case "kwt":
                                return "application/vnd.kde.kword";
                            case "lasxml":
                                return "application/vnd.las.las+xml";
                            case "latex":
                                return "application/x-latex";
                            case "lbd":
                                return "application/vnd.llamagraphics.life-balance.desktop";
                            case "lbe":
                                return "application/vnd.llamagraphics.life-balance.exchange+xml";
                            case "les":
                                return "application/vnd.hhe.lesson-player";
                            case "lha":
                                return "application/x-lzh-compressed";
                            case "link66":
                                return "application/vnd.route66.link66+xml";
                            case "list":
                                return "text/plain";
                            case "list3820":
                                return "application/vnd.ibm.modcap";
                            case "listafp":
                                return "application/vnd.ibm.modcap";
                            case "lnk":
                                return "application/x-ms-shortcut";
                            case "log":
                                return "text/plain";
                            case "lostxml":
                                return "application/lost+xml";
                            case "lrf":
                                return "application/octet-stream";
                            case "lrm":
                                return "application/vnd.ms-lrm";
                            case "ltf":
                                return "application/vnd.frogans.ltf";
                            case "lvp":
                                return "audio/vnd.lucent.voice";
                            case "lwp":
                                return "application/vnd.lotus-wordpro";
                            case "lzh":
                                return "application/x-lzh-compressed";
                            case "m13":
                                return "application/x-msmediaview";
                            case "m14":
                                return "application/x-msmediaview";
                            case "m1v":
                                return "video/mpeg";
                            case "m21":
                                return "application/mp21";
                            case "m2a":
                                return "audio/mpeg";
                            case "m2v":
                                return "video/mpeg";
                            case "m3a":
                                return "audio/mpeg";
                            case "m3u":
                                return "audio/x-mpegurl";
                            case "m3u8":
                                return "application/vnd.apple.mpegurl";
                            case "m4u":
                                return "video/vnd.mpegurl";
                            case "m4v":
                                return "video/x-m4v";
                            case "ma":
                                return "application/mathematica";
                            case "mads":
                                return "application/mads+xml";
                            case "mag":
                                return "application/vnd.ecowin.chart";
                            case "maker":
                                return "application/vnd.framemaker";
                            case "man":
                                return "text/troff";
                            case "mar":
                                return "application/octet-stream";
                            case "mathml":
                                return "application/mathml+xml";
                            case "mb":
                                return "application/mathematica";
                            case "mbk":
                                return "application/vnd.mobius.mbk";
                            case "mbox":
                                return "application/mbox";
                            case "mc1":
                                return "application/vnd.medcalcdata";
                            case "mcd":
                                return "application/vnd.mcd";
                            case "mcurl":
                                return "text/vnd.curl.mcurl";
                            case "mdb":
                                return "application/x-msaccess";
                            case "mdi":
                                return "image/vnd.ms-modi";
                            case "me":
                                return "text/troff";
                            case "mesh":
                                return "model/mesh";
                            case "meta4":
                                return "application/metalink4+xml";
                            case "metalink":
                                return "application/metalink+xml";
                            case "mets":
                                return "application/mets+xml";
                            case "mfm":
                                return "application/vnd.mfmp";
                            case "mft":
                                return "application/rpki-manifest";
                            case "mgp":
                                return "application/vnd.osgeo.mapguide.package";
                            case "mgz":
                                return "application/vnd.proteus.magazine";
                            case "mid":
                                return "audio/midi";
                            case "midi":
                                return "audio/midi";
                            case "mie":
                                return "application/x-mie";
                            case "mif":
                                return "application/vnd.mif";
                            case "mime":
                                return "message/rfc822";
                            case "mj2":
                                return "video/mj2";
                            case "mjp2":
                                return "video/mj2";
                            case "mk3d":
                                return "video/x-matroska";
                            case "mka":
                                return "audio/x-matroska";
                            case "mks":
                                return "video/x-matroska";
                            case "mkv":
                                return "video/x-matroska";
                            case "mlp":
                                return "application/vnd.dolby.mlp";
                            case "mmd":
                                return "application/vnd.chipnuts.karaoke-mmd";
                            case "mmf":
                                return "application/vnd.smaf";
                            case "mmr":
                                return "image/vnd.fujixerox.edmics-mmr";
                            case "mng":
                                return "video/x-mng";
                            case "mny":
                                return "application/x-msmoney";
                            case "mobi":
                                return "application/x-mobipocket-ebook";
                            case "mods":
                                return "application/mods+xml";
                            case "mov":
                                return "video/quicktime";
                            case "movie":
                                return "video/x-sgi-movie";
                            case "mp2":
                                return "audio/mpeg";
                            case "mp21":
                                return "application/mp21";
                            case "mp2a":
                                return "audio/mpeg";
                            case "mp3":
                                return "audio/mpeg";
                            case "mp4":
                                return "video/mp4";
                            case "mp4a":
                                return "audio/mp4";
                            case "mp4s":
                                return "application/mp4";
                            case "mp4v":
                                return "video/mp4";
                            case "mpc":
                                return "application/vnd.mophun.certificate";
                            case "mpe":
                                return "video/mpeg";
                            case "mpeg":
                                return "video/mpeg";
                            case "mpg":
                                return "video/mpeg";
                            case "mpg4":
                                return "video/mp4";
                            case "mpga":
                                return "audio/mpeg";
                            case "mpkg":
                                return "application/vnd.apple.installer+xml";
                            case "mpm":
                                return "application/vnd.blueice.multipass";
                            case "mpn":
                                return "application/vnd.mophun.application";
                            case "mpp":
                                return "application/vnd.ms-project";
                            case "mpt":
                                return "application/vnd.ms-project";
                            case "mpy":
                                return "application/vnd.ibm.minipay";
                            case "mqy":
                                return "application/vnd.mobius.mqy";
                            case "mrc":
                                return "application/marc";
                            case "mrcx":
                                return "application/marcxml+xml";
                            case "ms":
                                return "text/troff";
                            case "mscml":
                                return "application/mediaservercontrol+xml";
                            case "mseed":
                                return "application/vnd.fdsn.mseed";
                            case "mseq":
                                return "application/vnd.mseq";
                            case "msf":
                                return "application/vnd.epson.msf";
                            case "msh":
                                return "model/mesh";
                            case "msi":
                                return "application/x-msdownload";
                            case "msl":
                                return "application/vnd.mobius.msl";
                            case "msty":
                                return "application/vnd.muvee.style";
                            case "mts":
                                return "model/vnd.mts";
                            case "mus":
                                return "application/vnd.musician";
                            case "musicxml":
                                return "application/vnd.recordare.musicxml+xml";
                            case "mvb":
                                return "application/x-msmediaview";
                            case "mwf":
                                return "application/vnd.mfer";
                            case "mxf":
                                return "application/mxf";
                            case "mxl":
                                return "application/vnd.recordare.musicxml";
                            case "mxml":
                                return "application/xv+xml";
                            case "mxs":
                                return "application/vnd.triscape.mxs";
                            case "mxu":
                                return "video/vnd.mpegurl";
                            case "n3":
                                return "text/n3";
                            case "nb":
                                return "application/mathematica";
                            case "nbp":
                                return "application/vnd.wolfram.player";
                            case "nc":
                                return "application/x-netcdf";
                            case "ncx":
                                return "application/x-dtbncx+xml";
                            case "nfo":
                                return "text/x-nfo";
                            case "n-gage":
                                return "application/vnd.nokia.n-gage.symbian.install";
                            case "ngdat":
                                return "application/vnd.nokia.n-gage.data";
                            case "nitf":
                                return "application/vnd.nitf";
                            case "nlu":
                                return "application/vnd.neurolanguage.nlu";
                            case "nml":
                                return "application/vnd.enliven";
                            case "nnd":
                                return "application/vnd.noblenet-directory";
                            case "nns":
                                return "application/vnd.noblenet-sealer";
                            case "nnw":
                                return "application/vnd.noblenet-web";
                            case "npx":
                                return "image/vnd.net-fpx";
                            case "nsc":
                                return "application/x-conference";
                            case "nsf":
                                return "application/vnd.lotus-notes";
                            case "ntf":
                                return "application/vnd.nitf";
                            case "nzb":
                                return "application/x-nzb";
                            case "oa2":
                                return "application/vnd.fujitsu.oasys2";
                            case "oa3":
                                return "application/vnd.fujitsu.oasys3";
                            case "oas":
                                return "application/vnd.fujitsu.oasys";
                            case "obd":
                                return "application/x-msbinder";
                            case "obj":
                                return "application/x-tgif";
                            case "oda":
                                return "application/oda";
                            case "odb":
                                return "application/vnd.oasis.opendocument.database";
                            case "odc":
                                return "application/vnd.oasis.opendocument.chart";
                            case "odf":
                                return "application/vnd.oasis.opendocument.formula";
                            case "odft":
                                return "application/vnd.oasis.opendocument.formula-template";
                            case "odg":
                                return "application/vnd.oasis.opendocument.graphics";
                            case "odi":
                                return "application/vnd.oasis.opendocument.image";
                            case "odm":
                                return "application/vnd.oasis.opendocument.text-master";
                            case "odp":
                                return "application/vnd.oasis.opendocument.presentation";
                            case "ods":
                                return "application/vnd.oasis.opendocument.spreadsheet";
                            case "odt":
                                return "application/vnd.oasis.opendocument.text";
                            case "oga":
                                return "audio/ogg";
                            case "ogg":
                                return "audio/ogg";
                            case "ogv":
                                return "video/ogg";
                            case "ogx":
                                return "application/ogg";
                            case "omdoc":
                                return "application/omdoc+xml";
                            case "onepkg":
                                return "application/onenote";
                            case "onetmp":
                                return "application/onenote";
                            case "onetoc":
                                return "application/onenote";
                            case "onetoc2":
                                return "application/onenote";
                            case "opf":
                                return "application/oebps-package+xml";
                            case "opml":
                                return "text/x-opml";
                            case "oprc":
                                return "application/vnd.palm";
                            case "org":
                                return "application/vnd.lotus-organizer";
                            case "osf":
                                return "application/vnd.yamaha.openscoreformat";
                            case "osfpvg":
                                return "application/vnd.yamaha.openscoreformat.osfpvg+xml";
                            case "otc":
                                return "application/vnd.oasis.opendocument.chart-template";
                            case "otf":
                                return "application/x-font-otf";
                            case "otg":
                                return "application/vnd.oasis.opendocument.graphics-template";
                            case "oth":
                                return "application/vnd.oasis.opendocument.text-web";
                            case "oti":
                                return "application/vnd.oasis.opendocument.image-template";
                            case "otp":
                                return "application/vnd.oasis.opendocument.presentation-template";
                            case "ots":
                                return "application/vnd.oasis.opendocument.spreadsheet-template";
                            case "ott":
                                return "application/vnd.oasis.opendocument.text-template";
                            case "oxps":
                                return "application/oxps";
                            case "oxt":
                                return "application/vnd.openofficeorg.extension";
                            case "p":
                                return "text/x-pascal";
                            case "p10":
                                return "application/pkcs10";
                            case "p12":
                                return "application/x-pkcs12";
                            case "p7b":
                                return "application/x-pkcs7-certificates";
                            case "p7c":
                                return "application/pkcs7-mime";
                            case "p7m":
                                return "application/pkcs7-mime";
                            case "p7r":
                                return "application/x-pkcs7-certreqresp";
                            case "p7s":
                                return "application/pkcs7-signature";
                            case "p8":
                                return "application/pkcs8";
                            case "pas":
                                return "text/x-pascal";
                            case "paw":
                                return "application/vnd.pawaafile";
                            case "pbd":
                                return "application/vnd.powerbuilder6";
                            case "pbm":
                                return "image/x-portable-bitmap";
                            case "pcap":
                                return "application/vnd.tcpdump.pcap";
                            case "pcf":
                                return "application/x-font-pcf";
                            case "pcl":
                                return "application/vnd.hp-pcl";
                            case "pclxl":
                                return "application/vnd.hp-pclxl";
                            case "pct":
                                return "image/x-pict";
                            case "pcurl":
                                return "application/vnd.curl.pcurl";
                            case "pcx":
                                return "image/x-pcx";
                            case "pdb":
                                return "application/vnd.palm";
                            case "pdf":
                                return "application/pdf";
                            case "pfa":
                                return "application/x-font-type1";
                            case "pfb":
                                return "application/x-font-type1";
                            case "pfm":
                                return "application/x-font-type1";
                            case "pfr":
                                return "application/font-tdpfr";
                            case "pfx":
                                return "application/x-pkcs12";
                            case "pgm":
                                return "image/x-portable-graymap";
                            case "pgn":
                                return "application/x-chess-pgn";
                            case "pgp":
                                return "application/pgp-encrypted";
                            case "pic":
                                return "image/x-pict";
                            case "pkg":
                                return "application/octet-stream";
                            case "pki":
                                return "application/pkixcmp";
                            case "pkipath":
                                return "application/pkix-pkipath";
                            case "plb":
                                return "application/vnd.3gpp.pic-bw-large";
                            case "plc":
                                return "application/vnd.mobius.plc";
                            case "plf":
                                return "application/vnd.pocketlearn";
                            case "pls":
                                return "application/pls+xml";
                            case "pml":
                                return "application/vnd.ctc-posml";
                            case "png":
                                return "image/png";
                            case "pnm":
                                return "image/x-portable-anymap";
                            case "portpkg":
                                return "application/vnd.macports.portpkg";
                            case "pot":
                                return "application/vnd.ms-powerpoint";
                            case "potm":
                                return "application/vnd.ms-powerpoint.template.macroenabled.12";
                            case "potx":
                                return "application/vnd.openxmlformats-officedocument.presentationml.template";
                            case "ppam":
                                return "application/vnd.ms-powerpoint.addin.macroenabled.12";
                            case "ppd":
                                return "application/vnd.cups-ppd";
                            case "ppm":
                                return "image/x-portable-pixmap";
                            case "pps":
                                return "application/vnd.ms-powerpoint";
                            case "ppsm":
                                return "application/vnd.ms-powerpoint.slideshow.macroenabled.12";
                            case "ppsx":
                                return "application/vnd.openxmlformats-officedocument.presentationml.slideshow";
                            case "ppt":
                                return "application/vnd.ms-powerpoint";
                            case "pptm":
                                return "application/vnd.ms-powerpoint.presentation.macroenabled.12";
                            case "pptx":
                                return "application/vnd.openxmlformats-officedocument.presentationml.presentation";
                            case "pqa":
                                return "application/vnd.palm";
                            case "prc":
                                return "application/x-mobipocket-ebook";
                            case "pre":
                                return "application/vnd.lotus-freelance";
                            case "prf":
                                return "application/pics-rules";
                            case "ps":
                                return "application/postscript";
                            case "psb":
                                return "application/vnd.3gpp.pic-bw-small";
                            case "psd":
                                return "image/vnd.adobe.photoshop";
                            case "psf":
                                return "application/x-font-linux-psf";
                            case "pskcxml":
                                return "application/pskc+xml";
                            case "ptid":
                                return "application/vnd.pvi.ptid1";
                            case "pub":
                                return "application/x-mspublisher";
                            case "pvb":
                                return "application/vnd.3gpp.pic-bw-var";
                            case "pwn":
                                return "application/vnd.3m.post-it-notes";
                            case "pya":
                                return "audio/vnd.ms-playready.media.pya";
                            case "pyv":
                                return "video/vnd.ms-playready.media.pyv";
                            case "qam":
                                return "application/vnd.epson.quickanime";
                            case "qbo":
                                return "application/vnd.intu.qbo";
                            case "qfx":
                                return "application/vnd.intu.qfx";
                            case "qps":
                                return "application/vnd.publishare-delta-tree";
                            case "qt":
                                return "video/quicktime";
                            case "qwd":
                                return "application/vnd.quark.quarkxpress";
                            case "qwt":
                                return "application/vnd.quark.quarkxpress";
                            case "qxb":
                                return "application/vnd.quark.quarkxpress";
                            case "qxd":
                                return "application/vnd.quark.quarkxpress";
                            case "qxl":
                                return "application/vnd.quark.quarkxpress";
                            case "qxt":
                                return "application/vnd.quark.quarkxpress";
                            case "ra":
                                return "audio/x-pn-realaudio";
                            case "ram":
                                return "audio/x-pn-realaudio";
                            case "rar":
                                return "application/x-rar-compressed";
                            case "ras":
                                return "image/x-cmu-raster";
                            case "rcprofile":
                                return "application/vnd.ipunplugged.rcprofile";
                            case "rdf":
                                return "application/rdf+xml";
                            case "rdz":
                                return "application/vnd.data-vision.rdz";
                            case "rep":
                                return "application/vnd.businessobjects";
                            case "res":
                                return "application/x-dtbresource+xml";
                            case "rgb":
                                return "image/x-rgb";
                            case "rif":
                                return "application/reginfo+xml";
                            case "rip":
                                return "audio/vnd.rip";
                            case "ris":
                                return "application/x-research-info-systems";
                            case "rl":
                                return "application/resource-lists+xml";
                            case "rlc":
                                return "image/vnd.fujixerox.edmics-rlc";
                            case "rld":
                                return "application/resource-lists-diff+xml";
                            case "rm":
                                return "application/vnd.rn-realmedia";
                            case "rmi":
                                return "audio/midi";
                            case "rmp":
                                return "audio/x-pn-realaudio-plugin";
                            case "rms":
                                return "application/vnd.jcp.javame.midlet-rms";
                            case "rmvb":
                                return "application/vnd.rn-realmedia-vbr";
                            case "rnc":
                                return "application/relax-ng-compact-syntax";
                            case "roa":
                                return "application/rpki-roa";
                            case "roff":
                                return "text/troff";
                            case "rp9":
                                return "application/vnd.cloanto.rp9";
                            case "rpss":
                                return "application/vnd.nokia.radio-presets";
                            case "rpst":
                                return "application/vnd.nokia.radio-preset";
                            case "rq":
                                return "application/sparql-query";
                            case "rs":
                                return "application/rls-services+xml";
                            case "rsd":
                                return "application/rsd+xml";
                            case "rss":
                                return "application/rss+xml";
                            case "rtf":
                                return "application/rtf";
                            case "rtx":
                                return "text/richtext";
                            case "s":
                                return "text/x-asm";
                            case "s3m":
                                return "audio/s3m";
                            case "saf":
                                return "application/vnd.yamaha.smaf-audio";
                            case "sbml":
                                return "application/sbml+xml";
                            case "sc":
                                return "application/vnd.ibm.secure-container";
                            case "scd":
                                return "application/x-msschedule";
                            case "scm":
                                return "application/vnd.lotus-screencam";
                            case "scq":
                                return "application/scvp-cv-request";
                            case "scs":
                                return "application/scvp-cv-response";
                            case "scurl":
                                return "text/vnd.curl.scurl";
                            case "sda":
                                return "application/vnd.stardivision.draw";
                            case "sdc":
                                return "application/vnd.stardivision.calc";
                            case "sdd":
                                return "application/vnd.stardivision.impress";
                            case "sdkd":
                                return "application/vnd.solent.sdkm+xml";
                            case "sdkm":
                                return "application/vnd.solent.sdkm+xml";
                            case "sdp":
                                return "application/sdp";
                            case "sdw":
                                return "application/vnd.stardivision.writer";
                            case "see":
                                return "application/vnd.seemail";
                            case "seed":
                                return "application/vnd.fdsn.seed";
                            case "sema":
                                return "application/vnd.sema";
                            case "semd":
                                return "application/vnd.semd";
                            case "semf":
                                return "application/vnd.semf";
                            case "ser":
                                return "application/java-serialized-object";
                            case "setpay":
                                return "application/set-payment-initiation";
                            case "setreg":
                                return "application/set-registration-initiation";
                            case "sfd-hdstx":
                                return "application/vnd.hydrostatix.sof-data";
                            case "sfs":
                                return "application/vnd.spotfire.sfs";
                            case "sfv":
                                return "text/x-sfv";
                            case "sgi":
                                return "image/sgi";
                            case "sgl":
                                return "application/vnd.stardivision.writer-global";
                            case "sgm":
                                return "text/sgml";
                            case "sgml":
                                return "text/sgml";
                            case "sh":
                                return "application/x-sh";
                            case "shar":
                                return "application/x-shar";
                            case "shf":
                                return "application/shf+xml";
                            case "sid":
                                return "image/x-mrsid-image";
                            case "sig":
                                return "application/pgp-signature";
                            case "sil":
                                return "audio/silk";
                            case "silo":
                                return "model/mesh";
                            case "sis":
                                return "application/vnd.symbian.install";
                            case "sisx":
                                return "application/vnd.symbian.install";
                            case "sit":
                                return "application/x-stuffit";
                            case "sitx":
                                return "application/x-stuffitx";
                            case "skd":
                                return "application/vnd.koan";
                            case "skm":
                                return "application/vnd.koan";
                            case "skp":
                                return "application/vnd.koan";
                            case "skt":
                                return "application/vnd.koan";
                            case "sldm":
                                return "application/vnd.ms-powerpoint.slide.macroenabled.12";
                            case "sldx":
                                return "application/vnd.openxmlformats-officedocument.presentationml.slide";
                            case "slt":
                                return "application/vnd.epson.salt";
                            case "sm":
                                return "application/vnd.stepmania.stepchart";
                            case "smf":
                                return "application/vnd.stardivision.math";
                            case "smi":
                                return "application/smil+xml";
                            case "smil":
                                return "application/smil+xml";
                            case "smv":
                                return "video/x-smv";
                            case "smzip":
                                return "application/vnd.stepmania.package";
                            case "snd":
                                return "audio/basic";
                            case "snf":
                                return "application/x-font-snf";
                            case "so":
                                return "application/octet-stream";
                            case "spc":
                                return "application/x-pkcs7-certificates";
                            case "spf":
                                return "application/vnd.yamaha.smaf-phrase";
                            case "spl":
                                return "application/x-futuresplash";
                            case "spot":
                                return "text/vnd.in3d.spot";
                            case "spp":
                                return "application/scvp-vp-response";
                            case "spq":
                                return "application/scvp-vp-request";
                            case "spx":
                                return "audio/ogg";
                            case "sql":
                                return "application/x-sql";
                            case "src":
                                return "application/x-wais-source";
                            case "srt":
                                return "application/x-subrip";
                            case "sru":
                                return "application/sru+xml";
                            case "srx":
                                return "application/sparql-results+xml";
                            case "ssdl":
                                return "application/ssdl+xml";
                            case "sse":
                                return "application/vnd.kodak-descriptor";
                            case "ssf":
                                return "application/vnd.epson.ssf";
                            case "ssml":
                                return "application/ssml+xml";
                            case "st":
                                return "application/vnd.sailingtracker.track";
                            case "stc":
                                return "application/vnd.sun.xml.calc.template";
                            case "std":
                                return "application/vnd.sun.xml.draw.template";
                            case "stf":
                                return "application/vnd.wt.stf";
                            case "sti":
                                return "application/vnd.sun.xml.impress.template";
                            case "stk":
                                return "application/hyperstudio";
                            case "stl":
                                return "application/vnd.ms-pki.stl";
                            case "str":
                                return "application/vnd.pg.format";
                            case "stw":
                                return "application/vnd.sun.xml.writer.template";
                            case "sub":
                                return "text/vnd.dvb.subtitle";
                            case "sus":
                                return "application/vnd.sus-calendar";
                            case "susp":
                                return "application/vnd.sus-calendar";
                            case "sv4cpio":
                                return "application/x-sv4cpio";
                            case "sv4crc":
                                return "application/x-sv4crc";
                            case "svc":
                                return "application/vnd.dvb.service";
                            case "svd":
                                return "application/vnd.svd";
                            case "svg":
                                return "image/svg+xml";
                            case "svgz":
                                return "image/svg+xml";
                            case "swa":
                                return "application/x-director";
                            case "swf":
                                return "application/x-shockwave-flash";
                            case "swi":
                                return "application/vnd.aristanetworks.swi";
                            case "sxc":
                                return "application/vnd.sun.xml.calc";
                            case "sxd":
                                return "application/vnd.sun.xml.draw";
                            case "sxg":
                                return "application/vnd.sun.xml.writer.global";
                            case "sxi":
                                return "application/vnd.sun.xml.impress";
                            case "sxm":
                                return "application/vnd.sun.xml.math";
                            case "sxw":
                                return "application/vnd.sun.xml.writer";
                            case "t":
                                return "text/troff";
                            case "t3":
                                return "application/x-t3vm-image";
                            case "taglet":
                                return "application/vnd.mynfc";
                            case "tao":
                                return "application/vnd.tao.intent-module-archive";
                            case "tar":
                                return "application/x-tar";
                            case "tcap":
                                return "application/vnd.3gpp2.tcap";
                            case "tcl":
                                return "application/x-tcl";
                            case "teacher":
                                return "application/vnd.smart.teacher";
                            case "tei":
                                return "application/tei+xml";
                            case "teicorpus":
                                return "application/tei+xml";
                            case "tex":
                                return "application/x-tex";
                            case "texi":
                                return "application/x-texinfo";
                            case "texinfo":
                                return "application/x-texinfo";
                            case "text":
                                return "text/plain";
                            case "tfi":
                                return "application/thraud+xml";
                            case "tfm":
                                return "application/x-tex-tfm";
                            case "tga":
                                return "image/x-tga";
                            case "thmx":
                                return "application/vnd.ms-officetheme";
                            case "tif":
                                return "image/tiff";
                            case "tiff":
                                return "image/tiff";
                            case "tmo":
                                return "application/vnd.tmobile-livetv";
                            case "torrent":
                                return "application/x-bittorrent";
                            case "tpl":
                                return "application/vnd.groove-tool-template";
                            case "tpt":
                                return "application/vnd.trid.tpt";
                            case "tr":
                                return "text/troff";
                            case "tra":
                                return "application/vnd.trueapp";
                            case "trm":
                                return "application/x-msterminal";
                            case "ts":
                                return "application/typescript";
                            case "tsd":
                                return "application/timestamped-data";
                            case "tsv":
                                return "text/tab-separated-values";
                            case "ttc":
                                return "application/x-font-ttf";
                            case "ttf":
                                return "application/x-font-ttf";
                            case "ttl":
                                return "text/turtle";
                            case "twd":
                                return "application/vnd.simtech-mindmapper";
                            case "twds":
                                return "application/vnd.simtech-mindmapper";
                            case "txd":
                                return "application/vnd.genomatix.tuxedo";
                            case "txf":
                                return "application/vnd.mobius.txf";
                            case "txt":
                                return "text/plain";
                            case "u32":
                                return "application/x-authorware-bin";
                            case "udeb":
                                return "application/x-debian-package";
                            case "ufd":
                                return "application/vnd.ufdl";
                            case "ufdl":
                                return "application/vnd.ufdl";
                            case "ulx":
                                return "application/x-glulx";
                            case "umj":
                                return "application/vnd.umajin";
                            case "unityweb":
                                return "application/vnd.unity";
                            case "uoml":
                                return "application/vnd.uoml+xml";
                            case "uri":
                                return "text/uri-list";
                            case "uris":
                                return "text/uri-list";
                            case "urls":
                                return "text/uri-list";
                            case "ustar":
                                return "application/x-ustar";
                            case "utz":
                                return "application/vnd.uiq.theme";
                            case "uu":
                                return "text/x-uuencode";
                            case "uva":
                                return "audio/vnd.dece.audio";
                            case "uvd":
                                return "application/vnd.dece.data";
                            case "uvf":
                                return "application/vnd.dece.data";
                            case "uvg":
                                return "image/vnd.dece.graphic";
                            case "uvh":
                                return "video/vnd.dece.hd";
                            case "uvi":
                                return "image/vnd.dece.graphic";
                            case "uvm":
                                return "video/vnd.dece.mobile";
                            case "uvp":
                                return "video/vnd.dece.pd";
                            case "uvs":
                                return "video/vnd.dece.sd";
                            case "uvt":
                                return "application/vnd.dece.ttml+xml";
                            case "uvu":
                                return "video/vnd.uvvu.mp4";
                            case "uvv":
                                return "video/vnd.dece.video";
                            case "uvva":
                                return "audio/vnd.dece.audio";
                            case "uvvd":
                                return "application/vnd.dece.data";
                            case "uvvf":
                                return "application/vnd.dece.data";
                            case "uvvg":
                                return "image/vnd.dece.graphic";
                            case "uvvh":
                                return "video/vnd.dece.hd";
                            case "uvvi":
                                return "image/vnd.dece.graphic";
                            case "uvvm":
                                return "video/vnd.dece.mobile";
                            case "uvvp":
                                return "video/vnd.dece.pd";
                            case "uvvs":
                                return "video/vnd.dece.sd";
                            case "uvvt":
                                return "application/vnd.dece.ttml+xml";
                            case "uvvu":
                                return "video/vnd.uvvu.mp4";
                            case "uvvv":
                                return "video/vnd.dece.video";
                            case "uvvx":
                                return "application/vnd.dece.unspecified";
                            case "uvvz":
                                return "application/vnd.dece.zip";
                            case "uvx":
                                return "application/vnd.dece.unspecified";
                            case "uvz":
                                return "application/vnd.dece.zip";
                            case "vcard":
                                return "text/vcard";
                            case "vcd":
                                return "application/x-cdlink";
                            case "vcf":
                                return "text/x-vcard";
                            case "vcg":
                                return "application/vnd.groove-vcard";
                            case "vcs":
                                return "text/x-vcalendar";
                            case "vcx":
                                return "application/vnd.vcx";
                            case "vis":
                                return "application/vnd.visionary";
                            case "viv":
                                return "video/vnd.vivo";
                            case "vob":
                                return "video/x-ms-vob";
                            case "vor":
                                return "application/vnd.stardivision.writer";
                            case "vox":
                                return "application/x-authorware-bin";
                            case "vrml":
                                return "model/vrml";
                            case "vsd":
                                return "application/vnd.visio";
                            case "vsf":
                                return "application/vnd.vsf";
                            case "vss":
                                return "application/vnd.visio";
                            case "vst":
                                return "application/vnd.visio";
                            case "vsw":
                                return "application/vnd.visio";
                            case "vtu":
                                return "model/vnd.vtu";
                            case "vxml":
                                return "application/voicexml+xml";
                            case "w3d":
                                return "application/x-director";
                            case "wad":
                                return "application/x-doom";
                            case "wav":
                                return "audio/x-wav";
                            case "wax":
                                return "audio/x-ms-wax";
                            case "wbmp":
                                return "image/vnd.wap.wbmp";
                            case "wbs":
                                return "application/vnd.criticaltools.wbs+xml";
                            case "wbxml":
                                return "application/vnd.wap.wbxml";
                            case "wcm":
                                return "application/vnd.ms-works";
                            case "wdb":
                                return "application/vnd.ms-works";
                            case "wdp":
                                return "image/vnd.ms-photo";
                            case "weba":
                                return "audio/webm";
                            case "webm":
                                return "video/webm";
                            case "webp":
                                return "image/webp";
                            case "wg":
                                return "application/vnd.pmi.widget";
                            case "wgt":
                                return "application/widget";
                            case "wks":
                                return "application/vnd.ms-works";
                            case "wm":
                                return "video/x-ms-wm";
                            case "wma":
                                return "audio/x-ms-wma";
                            case "wmd":
                                return "application/x-ms-wmd";
                            case "wmf":
                                return "application/x-msmetafile";
                            case "wml":
                                return "text/vnd.wap.wml";
                            case "wmlc":
                                return "application/vnd.wap.wmlc";
                            case "wmls":
                                return "text/vnd.wap.wmlscript";
                            case "wmlsc":
                                return "application/vnd.wap.wmlscriptc";
                            case "wmv":
                                return "video/x-ms-wmv";
                            case "wmx":
                                return "video/x-ms-wmx";
                            case "wmz":
                                return "application/x-msmetafile";
                            case "woff":
                                return "application/x-font-woff";
                            case "wpd":
                                return "application/vnd.wordperfect";
                            case "wpl":
                                return "application/vnd.ms-wpl";
                            case "wps":
                                return "application/vnd.ms-works";
                            case "wqd":
                                return "application/vnd.wqd";
                            case "wri":
                                return "application/x-mswrite";
                            case "wrl":
                                return "model/vrml";
                            case "wsdl":
                                return "application/wsdl+xml";
                            case "wspolicy":
                                return "application/wspolicy+xml";
                            case "wtb":
                                return "application/vnd.webturbo";
                            case "wvx":
                                return "video/x-ms-wvx";
                            case "x32":
                                return "application/x-authorware-bin";
                            case "x3d":
                                return "model/x3d+xml";
                            case "x3db":
                                return "model/x3d+binary";
                            case "x3dbz":
                                return "model/x3d+binary";
                            case "x3dv":
                                return "model/x3d+vrml";
                            case "x3dvz":
                                return "model/x3d+vrml";
                            case "x3dz":
                                return "model/x3d+xml";
                            case "xaml":
                                return "application/xaml+xml";
                            case "xap":
                                return "application/x-silverlight-app";
                            case "xar":
                                return "application/vnd.xara";
                            case "xbap":
                                return "application/x-ms-xbap";
                            case "xbd":
                                return "application/vnd.fujixerox.docuworks.binder";
                            case "xbm":
                                return "image/x-xbitmap";
                            case "xdf":
                                return "application/xcap-diff+xml";
                            case "xdm":
                                return "application/vnd.syncml.dm+xml";
                            case "xdp":
                                return "application/vnd.adobe.xdp+xml";
                            case "xdssc":
                                return "application/dssc+xml";
                            case "xdw":
                                return "application/vnd.fujixerox.docuworks";
                            case "xenc":
                                return "application/xenc+xml";
                            case "xer":
                                return "application/patch-ops-error+xml";
                            case "xfdf":
                                return "application/vnd.adobe.xfdf";
                            case "xfdl":
                                return "application/vnd.xfdl";
                            case "xht":
                                return "application/xhtml+xml";
                            case "xhtml":
                                return "application/xhtml+xml";
                            case "xhvml":
                                return "application/xv+xml";
                            case "xif":
                                return "image/vnd.xiff";
                            case "xla":
                                return "application/vnd.ms-excel";
                            case "xlam":
                                return "application/vnd.ms-excel.addin.macroenabled.12";
                            case "xlc":
                                return "application/vnd.ms-excel";
                            case "xlf":
                                return "application/x-xliff+xml";
                            case "xlm":
                                return "application/vnd.ms-excel";
                            case "xls":
                                return "application/vnd.ms-excel";
                            case "xlsb":
                                return "application/vnd.ms-excel.sheet.binary.macroenabled.12";
                            case "xlsm":
                                return "application/vnd.ms-excel.sheet.macroenabled.12";
                            case "xlsx":
                                return "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                            case "xlt":
                                return "application/vnd.ms-excel";
                            case "xltm":
                                return "application/vnd.ms-excel.template.macroenabled.12";
                            case "xltx":
                                return "application/vnd.openxmlformats-officedocument.spreadsheetml.template";
                            case "xlw":
                                return "application/vnd.ms-excel";
                            case "xm":
                                return "audio/xm";
                            case "xml":
                                return "application/xml";
                            case "xo":
                                return "application/vnd.olpc-sugar";
                            case "xop":
                                return "application/xop+xml";
                            case "xpi":
                                return "application/x-xpinstall";
                            case "xpl":
                                return "application/xproc+xml";
                            case "xpm":
                                return "image/x-xpixmap";
                            case "xpr":
                                return "application/vnd.is-xpr";
                            case "xps":
                                return "application/vnd.ms-xpsdocument";
                            case "xpw":
                                return "application/vnd.intercon.formnet";
                            case "xpx":
                                return "application/vnd.intercon.formnet";
                            case "xsl":
                                return "application/xml";
                            case "xslt":
                                return "application/xslt+xml";
                            case "xsm":
                                return "application/vnd.syncml+xml";
                            case "xspf":
                                return "application/xspf+xml";
                            case "xul":
                                return "application/vnd.mozilla.xul+xml";
                            case "xvm":
                                return "application/xv+xml";
                            case "xvml":
                                return "application/xv+xml";
                            case "xwd":
                                return "image/x-xwindowdump";
                            case "xyz":
                                return "chemical/x-xyz";
                            case "xz":
                                return "application/x-xz";
                            case "yang":
                                return "application/yang";
                            case "yin":
                                return "application/yin+xml";
                            case "z1":
                                return "application/x-zmachine";
                            case "z2":
                                return "application/x-zmachine";
                            case "z3":
                                return "application/x-zmachine";
                            case "z4":
                                return "application/x-zmachine";
                            case "z5":
                                return "application/x-zmachine";
                            case "z6":
                                return "application/x-zmachine";
                            case "z7":
                                return "application/x-zmachine";
                            case "z8":
                                return "application/x-zmachine";
                            case "zaz":
                                return "application/vnd.zzazz.deck+xml";
                            case "zip":
                                return "application/zip";
                            case "zir":
                                return "application/vnd.zul";
                            case "zirz":
                                return "application/vnd.zul";
                            case "zmm":
                                return "application/vnd.handheld-entertainment+xml";
                            default:
                                return "application/octet-stream";
                        }
                    }

                    return "application/octet-stream";
                };
                return Mime;
            })();
            media.Mime = Mime;
        })(web.media || (web.media = {}));
        var media = web.media;
    })(appex.web || (appex.web = {}));
    var web = appex.web;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (modules) {
        var AttributeCache = (function () {
            function AttributeCache() {
                this.values = [];
            }
            AttributeCache.prototype.set = function (name, value) {
                if (typeof (value) !== 'object') {
                    throw Error('appex.modules.Attribute: the value passed must be a object type.');
                }

                this.values.push({ name: name, value: value });
            };

            AttributeCache.prototype.get = function (name) {
                var result = {};

                var values = this.values.filter(function (value, index, arr) {
                    return value.name === name;
                });

                for (var j = 0; j < values.length; j++) {
                    for (var n in values[j].value) {
                        result[n] = values[j].value[n];
                    }
                }

                return result;
            };

            AttributeCache.prototype.get_lexical_scoped = function (name) {
                var split = name.split('.');

                var qualifier = '';

                var result = this.get(qualifier);

                for (var i = 0; i < split.length; i++) {
                    if (i == 0) {
                        qualifier = split[i];
                    } else {
                        qualifier += '.' + split[i];
                    }

                    var _result = this.get(qualifier);

                    for (var n in _result) {
                        result[n] = _result[n];
                    }
                }

                return result;
            };
            return AttributeCache;
        })();
        modules.AttributeCache = AttributeCache;
    })(appex.modules || (appex.modules = {}));
    var modules = appex.modules;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (modules) {
        var ModuleExport = (function () {
            function ModuleExport(module, type) {
                this.module = module;

                this.type = type;

                this._accessor = null;

                this._accessor_checked = false;

                this._attribute = null;

                this._attribute_checked = false;
            }
            ModuleExport.prototype.attribute = function () {
                if (this._attribute_checked) {
                    return this._attribute;
                } else {
                    var scope = this.type.scope;

                    if (scope.length > 0) {
                        if (scope[0].indexOf('"') !== -1) {
                            scope = scope.slice(1);
                        }
                    }

                    scope.push(this.type.name);

                    this._attribute = this.module.attributes.get_lexical_scoped(scope.join('.'));

                    this._attribute_checked = true;

                    return this._attribute;
                }
            };

            ModuleExport.prototype.accessor = function () {
                if (this._accessor_checked) {
                    return this._accessor;
                } else {
                    if (this.module != null) {
                        if (this.module.context != null) {
                            if (this.module.context.exports != null) {
                                var accessor = this.module.context.exports;

                                var scope = this.type.scope;

                                if (scope.length > 0) {
                                    if (scope[0].indexOf('"') !== -1) {
                                        scope = scope.slice(1);
                                    }
                                }

                                for (var n in scope) {
                                    accessor = accessor[scope[n]];

                                    if (accessor == null) {
                                        this._accessor_checked = true;

                                        return null;
                                    }
                                }

                                if (accessor[this.type.name]) {
                                    this._accessor = accessor[this.type.name];

                                    return this._accessor;
                                }
                            }
                        }
                    }
                }

                this._accessor_checked = true;

                return null;
            };
            return ModuleExport;
        })();
        modules.ModuleExport = ModuleExport;
    })(appex.modules || (appex.modules = {}));
    var modules = appex.modules;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (modules) {
        var Reflection = (function () {
            function Reflection(scripts) {
                this.scripts = scripts;
            }
            Reflection.prototype.typename = function (reflected_type) {
                var stack = [];

                for (var n in reflected_type.scope) {
                    if (reflected_type.scope[n].indexOf('\"') == -1) {
                        stack.push(reflected_type.scope[n]);
                    }
                }

                stack.push(reflected_type.name);

                return stack.join('.');
            };

            Reflection.prototype.get = function (qualifier) {
                var stack = [];

                for (var n in this.scripts) {
                    var reflected_type = this.scan_script(qualifier, stack, this.scripts[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                return null;
            };

            Reflection.prototype.scan_variable = function (qualifier, stack, variable) {
                stack.push(variable.name);

                if (qualifier == stack.join('.')) {
                    return variable;
                }

                stack.pop();

                return null;
            };

            Reflection.prototype.scan_method = function (qualifier, stack, method) {
                stack.push(method.name);

                if (qualifier == stack.join('.')) {
                    return method;
                }

                stack.pop();

                return null;
            };

            Reflection.prototype.scan_class = function (qualifier, stack, _class) {
                stack.push(_class.name);

                if (qualifier == stack.join('.')) {
                    return _class;
                }

                for (var n in _class.methods) {
                    var reflected_type = this.scan_method(qualifier, stack, _class.methods[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                for (var n in _class.variables) {
                    var reflected_type = this.scan_variable(qualifier, stack, _class.variables[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                stack.pop();

                return null;
            };

            Reflection.prototype.scan_interface = function (qualifier, stack, _interface) {
                stack.push(_interface.name);

                if (qualifier == stack.join('.')) {
                    return _interface;
                }

                for (var n in _interface.methods) {
                    var reflected_type = this.scan_method(qualifier, stack, _interface.methods[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                for (var n in _interface.variables) {
                    var reflected_type = this.scan_variable(qualifier, stack, _interface.variables[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                stack.pop();

                return null;
            };

            Reflection.prototype.scan_import = function (qualifier, stack, _import) {
                stack.push(_import.name);

                if (qualifier == stack.join('.')) {
                    return _import;
                }

                stack.pop();

                return null;
            };

            Reflection.prototype.scan_module = function (qualifier, stack, _module) {
                if (_module.name.indexOf('\"') == -1) {
                    stack.push(_module.name);
                }

                if (qualifier == stack.join('.')) {
                    return _module;
                }

                for (var n in _module.modules) {
                    var reflected_type = this.scan_module(qualifier, stack, _module.modules[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                for (var n in _module.imports) {
                    var reflected_type = this.scan_import(qualifier, stack, _module.imports[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                for (var n in _module.interfaces) {
                    var reflected_type = this.scan_interface(qualifier, stack, _module.interfaces[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                for (var n in _module.classes) {
                    var reflected_type = this.scan_class(qualifier, stack, _module.classes[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                for (var n in _module.methods) {
                    var reflected_type = this.scan_method(qualifier, stack, _module.methods[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                for (var n in _module.variables) {
                    var reflected_type = this.scan_variable(qualifier, stack, _module.variables[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                if (_module.name.indexOf('\"') == -1) {
                    stack.pop();
                }

                return null;
            };

            Reflection.prototype.scan_script = function (qualifier, stack, script) {
                for (var n in script.modules) {
                    var reflected_type = this.scan_module(qualifier, stack, script.modules[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                for (var n in script.interfaces) {
                    var reflected_type = this.scan_interface(qualifier, stack, script.interfaces[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                for (var n in script.classes) {
                    var reflected_type = this.scan_class(qualifier, stack, script.classes[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                for (var n in script.methods) {
                    var reflected_type = this.scan_method(qualifier, stack, script.methods[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                for (var n in script.variables) {
                    var reflected_type = this.scan_variable(qualifier, stack, script.variables[n]);

                    if (reflected_type) {
                        return reflected_type;
                    }
                }

                return null;
            };
            return Reflection;
        })();
        modules.Reflection = Reflection;
    })(appex.modules || (appex.modules = {}));
    var modules = appex.modules;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (modules) {
        var Module = (function () {
            function Module(compilerResult) {
                this.filename = compilerResult.filename;

                this.javascript = compilerResult.javascript;

                this.diagnostics = compilerResult.diagnostics;

                this.reflection = new appex.modules.Reflection(compilerResult.scripts);

                this.attributes = new appex.modules.AttributeCache();

                this.load_vm();

                this.load_exports();
            }
            Module.prototype.load_vm = function () {
                var _this = this;
                var require = function (path) {
                    if (path.indexOf('/') != -1) {
                        var fullname = node.path.resolve(_this.filename, './');

                        var dirname = node.path.dirname(fullname);

                        path = node.path.resolve(dirname + '/' + path, './');
                    }

                    try
                    { return require(path); }
                    catch(ex)
                    { console.log(ex); }
                };

                var attribute = function () {
                    var params = [];
                    for (var _i = 0; _i < (arguments.length - 0); _i++) {
                        params[_i] = arguments[_i + 0];
                    }
                    if (params.length == 1) {
                        _this.attributes.set('', params[0]);
                    }

                    if (params.length == 2) {
                        _this.attributes.set(params[0], params[1]);
                    }
                };

                attribute.get = function (qualifer) {
                    return _this.attributes.get_lexical_scoped(qualifer);
                };

                this.context = node.vm.createContext();

                for (var n in global) {
                    this.context[n] = global[n];
                }

                this.context.__dirname = node.path.dirname(process.mainModule.filename);

                this.context.__filename = node.path.join(node.path.dirname(process.mainModule.filename), "appex.module.js");

                this.context.attribute = attribute;

                this.context.require = require;

                this.context.exports = {};

                this.context.module = {};

                var script = node.vm.createScript(this.javascript, 'appex.module.js');

                script.runInNewContext(this.context);
            };

            Module.prototype.load_exports = function () {
                this.exports = [];

                var scope = [];

                for (var n in this.reflection.scripts) {
                    this.load_script(this.reflection.scripts[n]);
                }
            };

            Module.prototype.load_variable = function (variable) {
                if (variable.isExported) {
                    this.exports.push(new appex.modules.ModuleExport(this, variable));
                }
            };

            Module.prototype.load_parameter = function (parameter) {
            };

            Module.prototype.load_method = function (method) {
                if (method.isExported) {
                    this.exports.push(new appex.modules.ModuleExport(this, method));

                    for (var n in method.parameters) {
                        this.load_parameter(method.parameters[n]);
                    }
                }
            };

            Module.prototype.load_class = function (_class) {
                if (_class.isExported) {
                    this.exports.push(new appex.modules.ModuleExport(this, _class));

                    for (var n in _class.methods) {
                        this.load_method(_class.methods[n]);
                    }

                    for (var n in _class.variables) {
                        this.load_variable(_class.variables[n]);
                    }
                }
            };

            Module.prototype.load_interface = function (_interface) {
                if (_interface.isExported) {
                    this.exports.push(new appex.modules.ModuleExport(this, _interface));

                    for (var n in _interface.methods) {
                        this.load_method(_interface.methods[n]);
                    }

                    for (var n in _interface.variables) {
                        this.load_variable(_interface.variables[n]);
                    }
                }
            };

            Module.prototype.load_import = function (_import) {
            };

            Module.prototype.load_module = function (_module) {
                if (_module.isExported) {
                    for (var n in _module.modules) {
                        this.load_module(_module.modules[n]);
                    }

                    for (var n in _module.imports) {
                        this.load_import(_module.imports[n]);
                    }

                    for (var n in _module.interfaces) {
                        this.load_interface(_module.interfaces[n]);
                    }

                    for (var n in _module.classes) {
                        this.load_class(_module.classes[n]);
                    }

                    for (var n in _module.methods) {
                        this.load_method(_module.methods[n]);
                    }

                    for (var n in _module.variables) {
                        this.load_variable(_module.variables[n]);
                    }
                }
            };

            Module.prototype.load_script = function (script) {
                for (var n in script.modules) {
                    this.load_module(script.modules[n]);
                }

                for (var n in script.interfaces) {
                    this.load_interface(script.interfaces[n]);
                }

                for (var n in script.classes) {
                    this.load_class(script.classes[n]);
                }

                for (var n in script.methods) {
                    this.load_method(script.methods[n]);
                }

                for (var n in script.variables) {
                    this.load_variable(script.variables[n]);
                }
            };

            Module.prototype.dispose = function () {
                this.context = null;
            };
            return Module;
        })();
        modules.Module = Module;
    })(appex.modules || (appex.modules = {}));
    var modules = appex.modules;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (compiler) {
        var Compiler = (function () {
            function Compiler() {
                this.worker = new appex.workers.Worker(this.kernel);
            }
            Compiler.prototype.compile = function (filename, callback) {
                this.worker.call(filename, callback);
            };

            Compiler.prototype.dispose = function () {
                this.worker.dispose();
            };

            Compiler.prototype.kernel = function (filename, callback) {
                var gather_diagnostics = function (units) {
                    var diagnostics = [];

                    units.forEach(function (unit) {
                        unit.diagnostics.forEach(function (diagnostic) {
                            diagnostics.push(diagnostic);
                        });
                    });

                    return diagnostics;
                };

                var tsapi = require('typescript.api');

                var errors = [];

                tsapi.resolve([filename], function (resolved) {
                    if (!tsapi.check(resolved)) {
                        callback({
                            filename: filename,
                            javascript: '',
                            scripts: null,
                            diagnostics: gather_diagnostics(resolved)
                        });

                        return;
                    }

                    tsapi.compile(resolved, function (compiled) {
                        if (!tsapi.check(compiled)) {
                            callback({
                                filename: filename,
                                javascript: '',
                                scripts: null,
                                diagnostics: gather_diagnostics(compiled)
                            });

                            return;
                        }

                        var content = [];

                        var scripts = [];

                        var declaration = [];

                        compiled.forEach(function (unit) {
                            content.push(unit.content);

                            scripts.push(unit.script);
                        });

                        callback({
                            filename: filename,
                            javascript: content.join('\n'),
                            scripts: scripts,
                            diagnostics: []
                        });
                    });
                });
            };
            return Compiler;
        })();
        compiler.Compiler = Compiler;
    })(appex.compiler || (appex.compiler = {}));
    var compiler = appex.compiler;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (workers) {
        var Waiter = (function () {
            function Waiter(messageid, delegate) {
                this.messageid = messageid;
                this.delegate = delegate;
            }
            return Waiter;
        })();
        workers.Waiter = Waiter;
    })(appex.workers || (appex.workers = {}));
    var workers = appex.workers;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (workers) {
        var Message = (function () {
            function Message() {
            }
            return Message;
        })();
        workers.Message = Message;
    })(appex.workers || (appex.workers = {}));
    var workers = appex.workers;
})(appex || (appex = {}));
var appex;
(function (appex) {
    (function (workers) {
        var Worker = (function () {
            function Worker(delegate) {
                this.delegate = delegate;
                this.message_index = 0;

                this.waiters = new Array();

                var message = new workers.Message();

                message.messageid = 0;

                message.type = 'setup';

                message.body = {
                    code: this.delegate.toString(),
                    filename: process.mainModule.filename
                };

                this.child_process = node.child_process.fork(__dirname + '/kernel.js');

                var that = this;

                this.child_process.on('message', function (message) {
                    that.dispatch(message);
                });

                this.child_process.send(message, null);
            }
            Worker.prototype.dispatch = function (message) {
                for (var i = 0; i < this.waiters.length; i++) {
                    if (this.waiters[i].messageid == message.messageid) {
                        this.waiters[i].delegate(message.body);

                        this.waiters.splice(i, 1);

                        break;
                    }
                }
            };

            Worker.prototype.call = function (request, callback) {
                this.waiters.push(new workers.Waiter(this.message_index, callback));

                var message = new workers.Message();

                message.messageid = this.message_index;

                message.type = 'call';

                message.body = request;

                this.child_process.send(message, null);

                this.message_index = this.message_index + 1;
            };

            Worker.prototype.dispose = function () {
                try  {
                    this.child_process.kill();
                } catch (error) {
                }
            };
            return Worker;
        })();
        workers.Worker = Worker;
    })(appex.workers || (appex.workers = {}));
    var workers = appex.workers;
})(appex || (appex = {}));
var node = {
    http: require('http'),
    https: require('https'),
    fs: require('fs'),
    vm: require('vm'),
    path: require('path'),
    child_process: require('child_process'),
    url: require('url'),
    util: require('util'),
    querystring: require('querystring')
};
module.exports = function (options) {
    options = appex.web.NormalizeServerOptions(options);

    var server;

    if (options.devmode) {
        server = new appex.web.DevelopmentServer(options);
    } else {
        server = new appex.web.Server(options);
    }

    var facade = function (request, response, next) {
        server.handler(request, response, next);
    };

    for (var n in server) {
        facade[n] = server[n];
    }

    return facade;
};

module.exports.workers = appex.workers;

module.exports.compiler = appex.compiler;

module.exports.modules = appex.modules;

module.exports.templates = appex.templates;

module.exports.web = appex.web;
