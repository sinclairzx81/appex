/*--------------------------------------------------------------------------

The MIT License (MIT)

Copyright (c) 2013 Haydn Paterson (sinclair) <haydn.developer@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

---------------------------------------------------------------------------*/

/// <reference path="../interfaces.ts" />
/// <reference path="../references.ts" />
/// <reference path="../compiler/CompilerResult.ts" />
/// <reference path="Reflection.ts" />
/// <reference path="ModuleExport.ts" />
/// <reference path="IModule.ts" />
/// <reference path="Attribute.ts" />

module appex.modules {

    /** A vm and object mapping over a javascript module compiled with the appex compiler */
    export class Module implements appex.modules.IModule {
        
        /** the modules filename */
        public filename    : string;

        /** exported javascript objects */
        public exports     : appex.modules.ModuleExport[];

        /** the vm context. (exported objects accessible on context.exports) */
        public context     : any;

        /** the javascript this module is mapping */
        public javascript  : string;

        /** type reflection meta data for this module */
        public reflection  : appex.modules.Reflection;

        /** compiler diagnostics for this module. */
        public diagnostics : typescript.api.Diagnostic[];

        /** the appex attributes */
        public attributes  : appex.modules.AttributeCache;

        /** arguments
        *       compilerResult - a compilation result from the appex compiler
        */
        constructor (compilerResult:appex.compiler.CompilerResult) {  
            
            this.filename    = compilerResult.filename;

            this.javascript  = compilerResult.javascript;

            this.diagnostics = compilerResult.diagnostics;

            this.reflection  = new appex.modules.Reflection( compilerResult.scripts );

            this.attributes   = new appex.modules.AttributeCache();

            this.load_vm();

            this.load_exports();
        }
        
        /** loads the module into a vm */
        private load_vm   () : void {

            var require = (path:string) => {

                // check to see if the caller is attempting 
                // to reference a js file via relative pathing,
                // if so, we need to intercept the path, and resolve
                // to the the compiled files path.
                if(path.indexOf('/') != -1) {

                    var fullname = node.path.resolve (this.filename, './')

                    var dirname  = node.path.dirname(fullname)

                    path = node.path.resolve(dirname + '/' + path, './')
                }

                //--------------------------------
                // update : github -> grofit
                //--------------------------------
                try {
                
                    return require(path);
                }
                catch(exception) {
                
                    console.log(exception)
                }
                
            }

            // the attibute method.
            var attribute:any = (...params: any[]) => { 

                if(params.length == 1) {

                    this.attributes.set('', params[0])
                }

                if(params.length == 2) {

                    this.attributes.set(params[0], params[1])
                }
            }

            attribute.get = (qualifer) => {
            
                return this.attributes.get_lexical_scoped(qualifer)
            }
            

            // create context

            this.context = node.vm.createContext()

            for(var n in global) {

                this.context[n] = global[n];

            }            

            this.context.__dirname  = node.path.dirname(process.mainModule.filename);

            this.context.__filename = node.path.join(node.path.dirname(process.mainModule.filename), "appex.module.js");
            
            this.context.attribute  = attribute;

            this.context.require    = require;

            this.context.exports    = {};

            this.context.module     = {};

            var script = node.vm.createScript( this.javascript, 'appex.module.js' );

            script.runInNewContext ( this.context );
        }
        
        /** loads the module exports derived from the reflection. */
        private load_exports   () : void {
            
            this.exports    = [];

            var scope       = [];

            for(var n in this.reflection.scripts) {

                this.load_script(this.reflection.scripts[n])
            }
        }
        
        private load_variable  (variable:typescript.api.Variable) : void {
            
            if(variable.isExported) {

                this.exports.push(new appex.modules.ModuleExport(this, variable));

            }
        }
        
        private load_parameter (parameter:typescript.api.Parameter) : void {
            
            // unused
        }

        private load_method    (method:typescript.api.Method) : void {
            
            if(method.isExported) {

                this.exports.push(new appex.modules.ModuleExport(this, method));

                for(var n in method.parameters) {

                    this.load_parameter (method.parameters[n]);
                }
            }
        }
        
        private load_class     (_class:typescript.api.Class) : void {

            if(_class.isExported) {

                this.exports.push(new appex.modules.ModuleExport(this, _class));

                for(var n in _class.methods) {

                    this.load_method( _class.methods[n] );
                }

                for(var n in _class.variables) {

                    this.load_variable( _class.variables[n] );
                }
            }
        }

        private load_interface ( _interface:typescript.api.Interface) : void {

            if(_interface.isExported) {

                this.exports.push(new appex.modules.ModuleExport(this, _interface));

                for(var n in _interface.methods) {

                    this.load_method( _interface.methods[n] );
                }

                for(var n in _interface.variables) {

                    this.load_variable( _interface.variables[n] );
                }
            }
        }

        private load_import    (_import:typescript.api.Import) : void {

            // do nothing......or....maybe run a compile here?    
        }

        private load_module    (_module:typescript.api.Module) : void {
            
            if(_module.isExported) {

                for(var n in _module.modules) {

                    this.load_module( _module.modules[n] );
                }

                for(var n in _module.imports) {

                    this.load_import( _module.imports[n] );
                }

                for(var n in _module.interfaces) {

                    this.load_interface( _module.interfaces[n] );
                } 
                  
                for(var n in _module.classes) {

                    this.load_class( _module.classes[n] );
                }

                for(var n in _module.methods) {

                    this.load_method( _module.methods[n] );
                }

                for(var n in _module.variables) {

                    this.load_variable( _module.variables[n] );
                }
            }
        }

        private load_script    (script:typescript.api.Script) : void {

            for(var n in script.modules) {

                this.load_module( script.modules[n] );
            }

            for(var n in script.interfaces) {

                this.load_interface( script.interfaces[n] );
            } 
                  
            for(var n in script.classes) {

                this.load_class( script.classes[n] );
            }

            for(var n in script.methods) {

                this.load_method( script.methods[n] );
            }

            for(var n in script.variables) {

                this.load_variable( script.variables[n] );
            }
        } 

        /** disposes of this module (cleaning up the vm) */
        public dispose(): void {
    
            this.context = null; // does this work?
        }
    }
}